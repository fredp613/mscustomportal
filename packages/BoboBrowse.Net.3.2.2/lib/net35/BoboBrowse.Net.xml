<?xml version="1.0"?>
<doc>
  <assembly>
    <name>BoboBrowse.Net</name>
  </assembly>
  <members>
    <member name="M:BoboBrowse.Net.Analysis.Section.IntMetaDataTokenStream.SetMetaData(System.Int32[])">
      <summary>
            sets meta data
            </summary>
      <param name="data">array of integer metadata indexed by section id</param>
    </member>
    <member name="T:BoboBrowse.Net.Analysis.Section.SectionTokenStream">
      <summary>
            This class augments a token stream by attaching a section id as payloads.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.BoboIndexReader">
      <summary>
            bobo browse index reader
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.BoboIndexReader.WorkArea">
      <summary>
            Work area for loading
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,BoboBrowse.Net.BoboIndexReader.WorkArea)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,BoboBrowse.Net.BoboIndexReader.WorkArea,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory})">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">
      </param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler})">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},BoboBrowse.Net.BoboIndexReader.WorkArea)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstance(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},BoboBrowse.Net.BoboIndexReader.WorkArea,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstanceAsSubReader(Lucene.Net.Index.IndexReader)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstanceAsSubReader(Lucene.Net.Index.IndexReader,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstanceAsSubReader(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory})">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstanceAsSubReader(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstanceAsSubReader(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},BoboBrowse.Net.BoboIndexReader.WorkArea)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetInstanceAsSubReader(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},BoboBrowse.Net.BoboIndexReader.WorkArea,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <returns>A new BoboIndexReader instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.CreateSubReaders(Lucene.Net.Index.IndexReader,BoboBrowse.Net.BoboIndexReader.WorkArea)">
      <summary>
            Find all the leaf sub-readers and wrap each in BoboIndexReader.
            </summary>
      <param name="reader">reader</param>
      <param name="workArea">workArea</param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.#ctor(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},BoboBrowse.Net.BoboIndexReader.WorkArea,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.#ctor(Lucene.Net.Index.IndexReader,System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IFacetHandler},System.Collections.Generic.IEnumerable{BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory},BoboBrowse.Net.BoboIndexReader.WorkArea,System.Boolean,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="reader">Index reader</param>
      <param name="facetHandlers">List of facet handlers</param>
      <param name="facetHandlerFactories">List of factories to create facet handler instances at runtime.</param>
      <param name="workArea">A service locator that can be used to inject custom objects.</param>
      <param name="autoClose">True to close the underlying IndexReader when this instance is closed.</param>
      <param name="useSubReaders">true =&gt; we create a MultiReader of all the leaf sub-readers as 
            the inner reader. false =&gt; we use the given reader as the inner reader.</param>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.DumpFields(System.IO.Stream)">
      <summary>
            Utility method to dump out all fields (name and terms) for a given index.
            </summary>
      <param name="outStream">Stream to dump to.</param>
    </member>
    <member name="M:BoboBrowse.Net.BoboIndexReader.GetFacetHandler(System.String)">
      <summary>Gets a facet handler</summary>
      <param name="fieldName">name</param>
      <returns>facet handler</returns>
    </member>
    <member name="P:BoboBrowse.Net.BoboIndexReader.SubReaders">
      <summary>
            Added in .NET as an internal accessor to the _subReaders property.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BoboIndexReader.FacetNames">
      <summary>Gets all the facet field names</summary>
      <returns> Set of facet field names </returns>
    </member>
    <member name="P:BoboBrowse.Net.BoboIndexReader.FacetHandlerMap">
      <summary>Gets the facet handler map</summary>
      <returns>facet handler map </returns>
    </member>
    <member name="P:BoboBrowse.Net.BoboIndexReader.RuntimeFacetHandlerFactoryMap">
      <summary>
            Gets the map of RuntimeFacetHandlerFactories
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BoboIndexReader.RuntimeFacetHandlerMap">
      <summary>
            Gets or sets the map of RuntimeFacetHandlers
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BoboIndexReader.RuntimeFacetDataMap">
      <summary>
            Gets or sets the map of RuntimeFacetData
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Search.BoboSearcher2.FacetValidator.Validate(System.Int32)">
      <summary>This method validates the doc against any multi-select enabled fields. </summary>
      <param name="docid">
      </param>
      <returns> true if all fields matched </returns>
    </member>
    <member name="M:BoboBrowse.Net.Search.BoboSearcher2.DefaultFacetValidator.Validate(System.Int32)">
      <summary>This method validates the doc against any multi-select enabled fields. </summary>
      <param name="docid">
      </param>
      <returns>true if all fields matched </returns>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.Browse(BoboBrowse.Net.BrowseRequest,Lucene.Net.Search.Collector,System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible})">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" />.
            The results are put into a Lucene.Net <see cref="T:Lucene.Net.Search.Collector" /> and a <see cref="T:System.Collections.Generic.IDictionary{System.String, IFacetAccessible}" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <param name="hitCollector">A <see cref="T:Lucene.Net.Search.Collector" /> for the hits generated during a search.</param>
      <param name="facets">A dictionary of all of the facet collections (output).</param>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.Browse(BoboBrowse.Net.BrowseRequest,Lucene.Net.Search.Collector,System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible},System.Int32)">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" />.
            The results are put into a Lucene.Net <see cref="T:Lucene.Net.Search.Collector" /> and a <see cref="T:System.Collections.Generic.IDictionary{System.String, IFacetAccessible}" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <param name="hitCollector">A <see cref="T:Lucene.Net.Search.Collector" /> for the hits generated during a search.</param>
      <param name="facets">A dictionary of all of the facet collections (output).</param>
      <param name="start">The offset value for the document number.</param>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.Browse(BoboBrowse.Net.BrowseRequest,Lucene.Net.Search.Weight,Lucene.Net.Search.Collector,System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible},System.Int32)">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" /> and a <see cref="T:Lucene.Net.Search.Weight" />.
            The results are put into a Lucene.Net <see cref="T:Lucene.Net.Search.Collector" /> and a <see cref="T:System.Collections.Generic.IDictionary{System.String, IFacetAccessible}" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <param name="weight">A <see cref="T:Lucene.Net.Search.Weight" /> instance to alter the score of the queries in a multiple index scenario.</param>
      <param name="hitCollector">A <see cref="T:Lucene.Net.Search.Collector" /> for the hits generated during a search.</param>
      <param name="facets">A dictionary of all of the facet collections (output).</param>
      <param name="start">The offset value for the document number.</param>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.Browse(BoboBrowse.Net.BrowseRequest)">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <returns>
        <see cref="T:BrowseResult" /> of the results corresponding to the <see cref="T:BrowseRequest" />.</returns>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.SetFacetHandler(BoboBrowse.Net.Facets.IFacetHandler)">
      <summary>
            Sets a facet handler for each sub-browser instance.
            </summary>
      <param name="facetHandler">A facet handler.</param>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.GetFacetHandler(System.String)">
      <summary>
            Gets a facet handler by facet name.
            </summary>
      <param name="name">The facet name.</param>
      <returns>The facet handler instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.GetFieldVal(System.Int32,System.String)">
      <summary>
            Return the string representation of the values of a field for the given doc.
            </summary>
      <param name="docid">The document id.</param>
      <param name="fieldname">The field name.</param>
      <returns>A string array of field values.</returns>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.GetRawFieldVal(System.Int32,System.String)">
      <summary>
            Return the raw (primitive) field values for the given doc.
            </summary>
      <param name="docid">The document id.</param>
      <param name="fieldname">The field name.</param>
      <returns>An object array of raw field values.</returns>
    </member>
    <member name="M:BoboBrowse.Net.IBrowsable.NumDocs">
      <summary>
            Gets the total number of documents in all sub browser instances.
            </summary>
      <returns>The total number of documents.</returns>
    </member>
    <member name="P:BoboBrowse.Net.IBrowsable.FacetNames">
      <summary>
            Gets a set of facet names.
            </summary>
      <returns>set of facet names</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboSubBrowser.SetFacetHandler(BoboBrowse.Net.Facets.IFacetHandler)">
      <summary>
            Sets runtime facet handler. If has the same name as a preload handler, for the
            duration of this browser, this one will be used.
            </summary>
      <param name="facetHandler">Runtime facet handler</param>
    </member>
    <member name="M:BoboBrowse.Net.BoboSubBrowser.GetFacetHandler(System.String)">
      <summary>
            Gets a defined facet handler
            </summary>
      <param name="name">facet name</param>
      <returns>a facet handler</returns>
    </member>
    <member name="M:BoboBrowse.Net.BoboSubBrowser.Browse(BoboBrowse.Net.BrowseRequest,Lucene.Net.Search.Collector,System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible})">
      <summary>
            browses the index.
            </summary>
      <param name="req">browse request</param>
      <param name="collector">collector for the hits</param>
      <param name="facetMap">map to gather facet data</param>
    </member>
    <member name="M:BoboBrowse.Net.BoboSubBrowser.GetFieldVal(System.Int32,System.String)">
      <summary>
            Returns the field data for a given doc.
            </summary>
      <param name="docid">doc</param>
      <param name="fieldname">name of the field</param>
      <returns>field data</returns>
    </member>
    <member name="P:BoboBrowse.Net.BoboSubBrowser.FacetNames">
      <summary>
            Gets a set of facet names
            </summary>
      <returns>set of facet names</returns>
    </member>
    <member name="T:BoboBrowse.Net.BrowseFacet">
      <summary>
            This class represents a facet
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseFacet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BrowseFacet" /> class.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseFacet.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:BrowseFacet" /> class with the provided value and hit count.
            </summary>
      <param name="value">The facet value.</param>
      <param name="hitCount">The hit count.</param>
    </member>
    <member name="P:BoboBrowse.Net.BrowseFacet.Value">
      <summary>
            Gets or sets the facet value.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseFacet.HitCount">
      <summary>
            Gets or sets the hit count.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseFacet.FacetValueHitCount">
      <summary>
            Gets or sets the hit count.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.BrowseRequest">
      <summary>
            Browse Request. A set of BrowseSelections, a keyword text query, and a set of FacetSpecs.
            author jwang
            </summary>
    </member>
    <member name="F:BoboBrowse.Net.BrowseRequest.tid">
      <summary>
            The transaction ID
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.GetSelectionNames">
      <summary>
            Gets a list of the names of the current selections.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.RemoveSelection(System.String)">
      <summary>
            Removes a selection by name.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BrowseRequest" /> class.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.ClearSort">
      <summary>
            Clears the list of <see cref="T:Lucene.Net.Search.SortField" /> instances for the <see cref="P:BrowseResult.Hits" />.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.SetFacetSpec(System.String,BoboBrowse.Net.FacetSpec)">
      <summary>
            Sets a <see cref="T:FacetSpec" /> and its related field name.
            <see cref="T:FacetSpec" /> specifies how facets are to be returned on the <see cref="T:BrowseResult" />.
            </summary>
      <param name="name">field name</param>
      <param name="facetSpec">Facet spec</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.GetFacetSpec(System.String)">
      <summary>
            Gets a <see cref="T:FacetSpec" /> by field name.
            <see cref="T:FacetSpec" /> specifies how facets are to be returned on the <see cref="T:BrowseResult" />.
            </summary>
      <param name="name">field name</param>
      <returns>facet spec</returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.SetFacetHandlerData(System.String,BoboBrowse.Net.Facets.FacetHandlerInitializerParam)">
      <summary>
            Sets a facet handler.
            </summary>
      <param name="name">the name of the <b>RuntimeFacetHandler</b>.</param>
      <param name="data">the data Bobo is to use to initialize the corresponding RuntimeFacetHandler.</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.GetFacetHandlerData(System.String)">
      <summary>
            Gets a facet handler.
            </summary>
      <param name="name">the name of the <b>RuntimeFacetHandler</b>.</param>
      <returns>the data Bobo is to use to initialize the corresponding RuntimeFacetHandler.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.AddSelection(BoboBrowse.Net.BrowseSelection)">
      <summary>
            Adds a browse selection. This typically corresponds to the selections a user would make on the user interface.
            </summary>
      <param name="sel">selection</param>
      <seealso cref="M:GetSelections" />
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.GetSelections">
      <summary>
            Gets all added browse selections.
            </summary>
      <returns>added selections</returns>
      <seealso cref="M:AddSelections" />
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.GetSelection(System.String)">
      <summary>
            Gets a selection by field name.
            </summary>
      <param name="fieldname">The field name.</param>
      <returns>The selection on the field.</returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.GetAllSelections">
      <summary>
            Gets a dictionary of all current selections.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.PutAllSelections(System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.BrowseSelection})">
      <summary>
            Adds all of the selection entries to the current dictionary of selections.
            </summary>
      <param name="map">A dictionary of field name to <see cref="T:BrowseSelection" /> pairs.</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.AddSortField(Lucene.Net.Search.SortField)">
      <summary>
            Add a sort specification for the <see cref="P:BrowseResult.Hits" />.
            </summary>
      <param name="sortSpec">sort specification</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseRequest.ToString">
      <summary>
            Gets a string representation of the current request.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.Tid">
      <summary>
            Gets or sets the transaction ID.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.TermVectorsToFetch">
      <summary>
            Gets or sets a list of term vectors to fetch from the Lucene.Net index. The values are populated in the <see cref="P:BrowseHit.TermFreqMap" />.
            A term vector is a list of the document's terms and their number of occurrences in that document.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.ShowExplanation">
      <summary>
            Gets or sets a flag indicating whether to set a <see cref="T:Lucene.Net.Search.Explanation" /> to the <see cref="P:BrowseHit.Explanation" /> property.
            An <see cref="T:Lucene.Net.Search.Explanation" /> describes the score computation for document and query.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.FacetSpecs">
      <summary>
            A dictionary of named FacetSpec instances.
            <see cref="T:FacetSpec" /> specifies how facets are to be returned on the <see cref="T:BrowseResult" />.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.FacetHandlerDataMap">
      <summary>
            Gets or sets the map between <b>RuntimeFacetHandler</b> names and their corresponding initialization data.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.SelectionCount">
      <summary>
            Gets the number of selections in the current request.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.Filter">
      <summary>
            Gets or sets the default filter.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.FacetSpecCount">
      <summary>
            Gets the number of facet specs.
            </summary>
      <seealso cref="M:SetFacetSpec" />
      <seealso cref="M:GetFacetSpec" />
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.FetchStoredFields">
      <summary>
            Gets or sets a flag indicating whether to return a reference to the Lucene.Net Document
            object in the <see cref="P:BrowseHit.StoredFields" /> property.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.MaxPerGroup">
      <summary>
            This setting does nothing. Left in place for parity with the Java version, which also has this field that does nothing.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.CollectDocIdCache">
      <summary>
            This setting does nothing. The Java version had some kind of caching mechanism that was triggered by this setting that was
            not implemented in this version.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.Count">
      <summary>
            Gets or sets the number of hits to return. Part of the paging parameters.
            Similar to the Take() method in a LINQ query.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.Offset">
      <summary>
            Gets or sets of the offset. Part of the paging parameters.
            Similar to the Skip() method in a LINQ query, but is 0-based instead of 1-based.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.Query">
      <summary>
            Gets or sets the search query
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseRequest.Sort">
      <summary>
            Gets or sets the sort criteria for the <see cref="P:BrowseResult.Hits" />.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.BrowseSelection">
      <summary>
            A selection or filter to be applied, e.g. Color=Red.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseSelection.SetSelectionProperty(System.String,System.String)">
      <summary>
            Sets a specific selection property with the given key and value.
            </summary>
      <param name="key">A key for the property.</param>
      <param name="val">The value for the property.</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseSelection.SetSelectionProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Sets a group of selection properties all at once. If the property already exists, 
            it will be overwritten; otherwise it will be added.
            </summary>
      <param name="props">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseSelection.AddValue(System.String)">
      <summary>
            Adds a selection value.
            </summary>
      <param name="val">Value to select.</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseSelection.AddNotValue(System.String)">
      <summary>
            Adds a selection NOT value.
            </summary>
      <param name="val">Value to NOT select.</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseSelection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BrowseSelection" /> class with the given field name.
            </summary>
      <param name="fieldName">A field name.</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseSelection.ToString">
      <summary>
            Gets a string representation of <see cref="T:BrowseSelection" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.BrowseSelection.SelectionProperties">
      <summary>
            A dictionary of custom properties that can be used by custom (or some built-in) 
            implementations of facet handlers, filters, and collectors.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseSelection.IsStrict">
      <summary>
            Gets if strict applied for counting. Used if the field is of type <b><i>path</i></b>.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseSelection.Depth">
      <summary>
            the depth.  Used if the field is of type <b><i>path</i></b>. 
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseSelection.FieldName">
      <summary>
            Gets or sets the field name.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseSelection.Values">
      <summary>
            Gets or sets the selected values.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseSelection.NotValues">
      <summary>
            Gets or sets the selected NOT values.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseSelection.SelectionOperation">
      <summary>
            Gets or sets value operation.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Support.IIterator`1">
      <summary>
            An iterator over a collection. Iterator takes the place of Enumeration in the Java Collections Framework. Iterators differ from enumerations in two ways:
            <list type=""><item>Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.</item><item>Method names have been improved.</item></list>
                
            This interface is a member of the Java Collections Framework.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BoboBrowse.Net.Support.IIterator`1.HasNext">
      <summary>
            Returns true if the iteration has more elements.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.IIterator`1.Next">
      <summary>
            Returns the next element in the iteration.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.IIterator`1.Remove">
      <summary>
            Removes from the underlying collection the last element returned by this iterator (optional operation).
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.FacetIterator">
      <summary>
            Iterator to iterate over facets
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.FacetIterator.Next">
      <summary>
            Moves the iteration to the next facet
            </summary>
      <returns>The next facet value.</returns>
    </member>
    <member name="M:BoboBrowse.Net.FacetIterator.Next(System.Int32)">
      <summary>
            Moves the iteration to the next facet whose hitcount &gt;= minHits. returns null if there is no facet whose hitcount &gt;= minHits.
            Hence while using this method, it is useless to use hasNext() with it.
            After the next() method returns null, calling it repeatedly would result in undefined behavior 
            </summary>
      <param name="minHits">
      </param>
      <returns>The next facet value. It returns null if there is no facet whose hitcount &gt;= minHits.</returns>
    </member>
    <member name="T:BoboBrowse.Net.DoubleFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.IFacetAccessible.GetFacets">
      <summary>Gets gathered top facets </summary>
      <returns>list of facets </returns>
    </member>
    <member name="M:BoboBrowse.Net.IFacetAccessible.GetFacet(System.String)">
      <summary>Gets the facet given a value. This is a way for random accessing into the facet data structure. </summary>
      <param name="value">Facet value </param>
      <returns>a facet with count filled in </returns>
    </member>
    <member name="M:BoboBrowse.Net.IFacetAccessible.GetFacetHitsCount(System.Object)">
      <summary>
            Gets the facet count given a value. This is a way for random
            accessing the facet count.
            </summary>
      <param name="value">Facet value</param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.IFacetAccessible.Iterator">
      <summary>
            Returns an iterator to visit all the facets
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.IFacetCountCollector">
      <summary>
            Collects facet counts for a given browse request
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.IFacetCountCollector.Collect(System.Int32)">
      <summary>Collect a hit. This is called for every hit, thus the implementation needs to be super-optimized.</summary>
      <param name="docid"> doc </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.IFacetCountCollector.CollectAll">
      <summary>Collects all hits. This is called once per request by the facet engine in certain scenarios.</summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.IFacetCountCollector.GetCountDistribution">
      <summary>Returns an integer array representing the distribution function of a given facet.</summary>
      <returns>
        <see cref="T:BoboBrowse.Net.Util.BigSegmentedArray" /> of count values representing distribution of the facet values.</returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.IFacetCountCollector.Name">
      <summary>Gets the name of the facet </summary>
      <returns>facet name </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFacetCountCollector.Iterator">
      <summary>
            This function returns an Iterator to visit the facets in value order
            </summary>
      <returns>The Iterator to iterate over the facets in value order</returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultFacetCountCollector.Count">
      <summary>
            Added in .NET version as an accessor to the _count field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultFacetCountCollector.DataCache">
      <summary>
            Added in .NET version as an accessor to the _dataCache field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultFacetCountCollector.CountLength">
      <summary>
            Added in .NET version as an accessor to the _countLength field.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Constructor
            </summary>
      <param name="name">
      </param>
      <param name="dependsOn">Set of names of facet handlers this facet handler depend on for loading</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.PutDependedFacetHandler(BoboBrowse.Net.Facets.IFacetHandler)">
      <summary>
            Adds a list of depended facet handlers
            </summary>
      <param name="facetHandler">Handler depended facet handler</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.GetDependedFacetHandler(System.String)">
      <summary>
            Gets a depended facet handler
            </summary>
      <param name="name">facet handler name</param>
      <returns>facet handler instance</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.Load(BoboBrowse.Net.BoboIndexReader)">
      <summary>
            Load information from an index reader, initialized by <see cref="T:BoboBrowse.Net.BoboIndexReader" />.
            </summary>
      <param name="reader">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.GetFacetCountCollectorSource(BoboBrowse.Net.BrowseSelection,BoboBrowse.Net.FacetSpec)">
      <summary>
            Gets a FacetCountCollector
            </summary>
      <param name="sel">selection</param>
      <param name="fspec">facetSpec</param>
      <returns>a FacetCountCollector</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.GetFacetCountCollectorSource(BoboBrowse.Net.BrowseSelection,BoboBrowse.Net.FacetSpec,System.Boolean)">
      <summary>
            Override this method if your facet handler have a better group mode like the SimpleFacetHandler.
            </summary>
      <param name="sel">selection</param>
      <param name="ospec">facetSpec</param>
      <param name="groupMode">groupMode</param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.GetFieldValues(BoboBrowse.Net.BoboIndexReader,System.Int32)">
      <summary>
            Gets the field value
            </summary>
      <param name="reader">index reader</param>
      <param name="id">doc</param>
      <returns>array of field values</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.GetFieldValue(BoboBrowse.Net.BoboIndexReader,System.Int32)">
      <summary>
            Gets a single field value 
            </summary>
      <param name="reader">index reader</param>
      <param name="id">doc</param>
      <returns>first field value</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.FacetHandler`1.GetDocComparatorSource">
      <summary>
            builds a comparator to determine how sorting is done
            </summary>
      <returns>a sort comparator</returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.FacetHandler`1.Name">
      <summary>
            Gets name of the current facet handler
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.FacetHandler`1.DependsOn">
      <summary>
            Gets names of the facet handler this depends on
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.RangeFacetHandler">
      <summary>
            Used to denote a range of facet, e.g. dates, prices etc. Each document can have only 1 value in this field. 
            When being indexed, this field should not be tokenized. Furthermore, the values need to be formatted to 
            ensure sorting by lexical order is the same as the value order. IMPORTANT: <see cref="T:Lucene.Net.Documents.NumericField" /> 
            in the Lucene.Net index is not supported, use <see cref="T:Lucene.Net.Documents.Field" /> with a formatted string instead.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.RangeFacetHandler.#ctor(System.String,System.String,BoboBrowse.Net.Facets.Data.TermListFactory,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetHandler" /> with the specified name, Lucene.Net index field name,
            <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance, and predefined ranges.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
      <param name="predefinedRanges">A set of range strings denoting the beginning and ending of each range, e.g. "[2010/1/1 TO 2012/12/31], [2013/1/1 TO 2015/12/31]".
            Date and numeric types are supported. The range values are sorted in lexicographical order, so if you want them formatted a different way, you should provide them in
            a specific order. It is valid for the ranges to overlap.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.RangeFacetHandler.#ctor(System.String,BoboBrowse.Net.Facets.Data.TermListFactory,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetHandler" /> with the specified name, 
            <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance, and predefined ranges.
            The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
      <param name="predefinedRanges">A set of range strings denoting the beginning and ending of each range, e.g. "[2010/1/1 TO 2012/12/31], [2013/1/1 TO 2015/12/31]".
            Date and numeric types are supported. The range values are sorted in lexicographical order, so if you want them formatted a different way, you should provide them in
            a specific order. It is valid for the ranges to overlap.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.RangeFacetHandler.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetHandler" /> with the specified name and predefined ranges.
            The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="predefinedRanges">A set of range strings denoting the beginning and ending of each range, e.g. "[2010/1/1 TO 2012/12/31], [2013/1/1 TO 2015/12/31]".
            Date and numeric types are supported. The range values are sorted in lexicographical order, so if you want them formatted a different way, you should provide them in
            a specific order. It is valid for the ranges to overlap.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.RangeFacetHandler.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetHandler" /> with the specified name, Lucene.Net index field name,
            and a set of predefined range values.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="predefinedRanges">A set of range strings denoting the beginning and ending of each range, e.g. "[2010/1/1 TO 2012/12/31], [2013/1/1 TO 2015/12/31]".
            Date and numeric types are supported. The range values are sorted in lexicographical order, so if you want them formatted a different way, you should provide them in
            a specific order. It is valid for the ranges to overlap.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.RangeFacetCountCollector.GetCountDistribution">
      <summary>
            gets distribution of the value arrays. When predefined ranges are available, this returns distribution by predefined ranges.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.RangeFacetCountCollector.ConvertFacets(BoboBrowse.Net.BrowseFacet[])">
      <summary>
      </summary>
      <remarks>
            This method was internal in the original design, but made it
            protected to make it easy to bring back the auto ranges feature if so desired.
            </remarks>
      <param name="facets">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.RangeFacetCountCollector.FoldChoices(BoboBrowse.Net.BrowseFacet[],System.Int32)">
      <summary>
      </summary>
      <remarks>
            This method was internal in the original design, but made it
            protected to make it easy to bring back the auto ranges feature if so desired.
            </remarks>
      <param name="choices">
      </param>
      <param name="max">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.FacetDataCache.Convert``1(BoboBrowse.Net.Facets.Data.FacetDataCache,``0[])">
      <summary>
            Same as ConvertString(FacetDataCache dataCache,string[] vals) except that the
            values are supplied in raw form so that we can take advantage of the type
            information to find index faster.
            </summary>
      <param name="dataCache">
      </param>
      <param name="vals">
      </param>
      <returns>the array of order indices of the values.</returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Data.MultiValueFacetDataCache.AllocOnlyLoader">
      <summary>
            A loader that allocate data storage without loading data to BigNestedIntArray.
            Note that this loader supports only non-negative integer data.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.MultiValueFacetDataCache.Load(System.String,Lucene.Net.Index.IndexReader,BoboBrowse.Net.Facets.Data.TermListFactory,BoboBrowse.Net.BoboIndexReader.WorkArea)">
      <summary>
            loads multi-value facet data. This method uses a workarea to prepare loading.
            </summary>
      <param name="fieldName">
      </param>
      <param name="reader">
      </param>
      <param name="listFactory">
      </param>
      <param name="workArea">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.MultiValueFacetDataCache.Load(System.String,Lucene.Net.Index.IndexReader,BoboBrowse.Net.Facets.Data.TermListFactory,Lucene.Net.Index.Term)">
      <summary>
            loads multi-value facet data. This method uses the count payload to allocate storage before loading data.
            </summary>
      <param name="fieldName">
      </param>
      <param name="reader">
      </param>
      <param name="listFactory">
      </param>
      <param name="sizeTerm">
      </param>
    </member>
    <member name="T:BoboBrowse.Net.Util.BigNestedIntArray">
      <summary>
            write-once big nested int array
            author ymatsuda
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.Loader.Initialize(System.Int32,System.Int32[][])">
      <summary>
            initializes the loading context
            </summary>
      <param name="size">
      </param>
      <param name="oldList">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.Loader.Finish">
      <summary>
            finishes loading
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.Loader.Load">
      <summary>
            loads data
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.Loader.Reserve(System.Int32,System.Int32)">
      <summary>
            reserves storage for the next int array data
            </summary>
      <param name="id">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.Loader.Store(System.Int32[],System.Int32,System.Int32)">
      <summary>
            stores int array data. must call reserve(int,int) first to allocate storage
            </summary>
      <param name="data">
      </param>
      <param name="off">
      </param>
      <param name="len">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.Loader.Allocate(System.Int32,System.Int32,System.Boolean)">
      <summary>
            allocates storage for future calls of setData.
            </summary>
      <param name="id">
      </param>
      <param name="len">
      </param>
      <param name="nonNegativeIntOnly">
      </param>
    </member>
    <member name="T:BoboBrowse.Net.Util.BigNestedIntArray.BufferedLoader">
      <summary>
            A loader that buffer all data in memory, then load them to BigNestedIntArray.
            Data does not need to be sorted prior to the operation.
            Note that this loader supports only non-negative integer data.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.BufferedLoader.Reset(System.Int32,System.Int32,BoboBrowse.Net.Util.BigIntBuffer)">
      <summary>
            resets loader. This also resets underlying BigIntBuffer.
            </summary>
      <param name="size">
      </param>
      <param name="maxItems">
      </param>
      <param name="buffer">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.BufferedLoader.Add(System.Int32,System.Int32)">
      <summary>
            adds a pair of id and value to the buffer
            </summary>
      <param name="id">
      </param>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.#ctor">
      <summary>
            Constructs BigNEstedIntArray
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.Load(System.Int32,BoboBrowse.Net.Util.BigNestedIntArray.Loader)">
      <summary>
            loads data using the loader
            </summary>
      <param name="size">
      </param>
      <param name="loader">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.GetData(System.Int32,System.Int32,System.Int32)">
      <summary>
            gets an int data at [id][idx] 
            </summary>
      <param name="id">
      </param>
      <param name="idx">
      </param>
      <param name="defaultValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.GetData(System.Int32,System.Int32[])">
      <summary>
            gets an int data at [id] 
            </summary>
      <param name="id">
      </param>
      <param name="buf">
      </param>
      <returns>length</returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.GetTranslatedData(System.Int32,BoboBrowse.Net.Facets.Data.ITermValueList)">
      <summary>
            translates the int value using the val list
            </summary>
      <param name="id">
      </param>
      <param name="valarray">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.GetRawData(System.Int32,BoboBrowse.Net.Facets.Data.ITermValueList)">
      <summary>
            translates the int value using the val list
            </summary>
      <param name="id">
      </param>
      <param name="valarray">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.GetNumItems(System.Int32)">
      <summary>
            returns the number data items for id
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.BigNestedIntArray.AddData(System.Int32,System.Int32)">
      <summary>
            adds Data to id
            </summary>
      <param name="id">
      </param>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Util.BigNestedIntArray.MaxItems">
      <summary>
            Gets or sets maximum number of items per doc.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Data.MultiValueWithWeightFacetDataCache.WeightArray">
      <summary>
            Added in .NET version as an accessor to the _weightArray field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Data.PrimitiveLongArrayWrapper.Data">
      <summary>
            Added in .NET version as an accessor to the data field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Data.TermValueList`1">
      <summary>This class behaves as <see cref="T:System.Collections.Generic.List{System.String}" /> with a few extensions:
            <list type="bullet"><item><description>Semi-immutable, e.g. once added, cannot be removed.</description></item><item><description>Assumes sequence of values added are in sorted order.</description></item></list><see cref="M:IndexOf(System.Object)" /> return value conforms to the contract of <see cref="M:System.Array.BinarySearch(T[], T)" />.
            <see cref="M:Seal" /> is introduce to trim the List size, similar to <see cref="M:System.Collections.ArrayList.TrimToSize" />, once it is called, no add should be performed.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.TermValueList`1.GetInnerList">
      <summary>
            The user of this method should not try to alter the content of the list,
            which may result in data inconsistency.
            And of the content can be accessed using the getRawValue(int) method.
            </summary>
      <returns>the inner list</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.TermValueList`1.Add(System.String)">
      <summary>
            Add a new value to the list. <b>It is important to add the values in sorted (ASC) order.</b>
            Our algorithm uses binary searches and priority queues, both of which fails when the ordering is wrong.
            </summary>
      <param name="o">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Filter.AdaptiveFacetFilter.#ctor(BoboBrowse.Net.Facets.Filter.IFacetDataCacheBuilder,BoboBrowse.Net.Facets.Filter.RandomAccessFilter,System.String[],System.Boolean)">
      <summary>
            If takeComplement is true, we still return the filter for NotValues.
            Therefore, the calling function of this class needs to apply NotFilter on top
            of this filter if takeComplement is true.
            </summary>
      <param name="facetDataCacheBuilder">
      </param>
      <param name="facetFilter">
      </param>
      <param name="val">
      </param>
      <param name="takeComplement">
      </param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Filter.GeoFacetFilter">
      <summary>
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Filter.GeoFacetFilter.GeoDocIdSet.#ctor(BoboBrowse.Net.Util.BigFloatArray,BoboBrowse.Net.Util.BigFloatArray,BoboBrowse.Net.Util.BigFloatArray,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="xvals">array of x coordinate values for docid</param>
      <param name="yvals">array of y coordinate values for docid</param>
      <param name="zvals">array of z coordinate values for docid</param>
      <param name="lat">target latitude</param>
      <param name="lon">target longitude</param>
      <param name="radius">target radius</param>
      <param name="maxdoc">max doc in the docid set</param>
      <param name="miles">variable to specify if the geo distance calculations are in miles. 
            False indicates distance calculation is in kilometers</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Filter.GeoFacetFilter.#ctor(BoboBrowse.Net.Facets.FacetHandler{BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData},System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
      </summary>
      <param name="facetHandler">The Geo Facet Handler for this instance</param>
      <param name="lat">latitude value of the user's point of interest</param>
      <param name="lon">longitude value of the user's point of interest</param>
      <param name="radius">Radius from the point of interest</param>
      <param name="miles">variable to specify if the geo distance calculations are in miles. False indicates distance calculation is in kilometers</param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Filter.GeoSimpleFacetFilter">
      <summary>
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.BucketFacetCountCollector.GetCountDistribution">
      <summary>
            get the total count of all possible elements 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.BucketFacetCountCollector.GetFacet(System.String)">
      <summary>
            get the facet of one particular bucket
            </summary>
      <param name="bucketValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleIteratorNode.Iterator">
      <summary>
            Added in .NET version as an accessor to the _iterator field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleIteratorNode.CurFacet">
      <summary>
            Added in .NET version as an accessor to the _curFacet field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleIteratorNode.CurFacetCount">
      <summary>
            Added in .NET version as an accessor to the _curFacetCount field.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleFacetPriorityQueue">
      <summary>
            Lucene PriorityQueue
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleFacetPriorityQueue.Initialize(System.Int32)">
            Subclass constructors must call this. 
        </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleFacetPriorityQueue.Top">
      <summary>
            Returns the least element of the PriorityQueue in constant time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleFacetPriorityQueue.Pop">
      <summary>
            Removes and returns the least element of the PriorityQueue in log(size)
            time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleFacetPriorityQueue.Size">
      <summary>
            Returns the number of elements currently stored in the PriorityQueue.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.DoubleFacetPriorityQueue.Clear">
      <summary>
            Removes all entries from the PriorityQueue.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.GetFacet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.Next(System.Int32)">
      <summary>
            This version of the next() method applies the minHits from the facet spec
            before returning the facet and its hitcount
            </summary>
      <param name="minHits">the minHits from the facet spec for CombinedFacetAccessible</param>
      <returns>The next facet that obeys the minHits</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedDoubleFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedFacetIterator">
      <summary>
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFacetIterator.Next">
      <summary>
            (non-Javadoc)
            @see FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFacetIterator.Next(System.Int32)">
      <summary>
            This version of the next() method applies the minHits from the facet spec before returning the facet and its hitcount
            </summary>
      <param name="minHits">the minHits from the facet spec for CombinedFacetAccessible</param>
      <returns>The next facet that obeys the minHits</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.FloatFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatIteratorNode.Iterator">
      <summary>
            Added in .NET version as an accessor to the _iterator field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatIteratorNode.CurFacet">
      <summary>
            Added in .NET version as an accessor to the _curFacet field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatIteratorNode.CurFacetCount">
      <summary>
            Added in .NET version as an accessor to the _curFacetCount field.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatFacetPriorityQueue">
      <summary>
            Lucene PriorityQueue
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatFacetPriorityQueue.Initialize(System.Int32)">
      <summary>
            Subclass constructors must call this.
            </summary>
      <param name="maxSize">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatFacetPriorityQueue.Top">
      <summary>
            Returns the least element of the PriorityQueue in constant time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatFacetPriorityQueue.Pop">
      <summary>
            Removes and returns the least element of the PriorityQueue in 
            log(size) time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatFacetPriorityQueue.Size">
      <summary>
            Returns the number of elements currently stored in the PriorityQueue.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FloatFacetPriorityQueue.Clear">
      <summary>
            Removes all entries from the PriorityQueue.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.GetFacet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.Next(System.Int32)">
      <summary>
            This version of the next() method applies the minHits from the facet spec
            before returning the facet and its hitcount
            </summary>
      <param name="minHits">the minHits from the facet spec for CombinedFacetAccessible</param>
      <returns>The next facet that obeys the minHits</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedFloatFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:BoboBrowse.Net.IntFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntIteratorNode.Iterator">
      <summary>
            Added in .NET version as an accessor to the _iterator field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntIteratorNode.CurFacet">
      <summary>
            Added in .NET version as an accessor to the _curFacet field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntIteratorNode.CurFacetCount">
      <summary>
            Added in .NET version as an accessor to the _curFacetCount field.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntFacetPriorityQueue">
      <summary>
            Lucene PriorityQueue
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntFacetPriorityQueue.Initialize(System.Int32)">
      <summary>
            Subclass constructors must call this.
            </summary>
      <param name="maxSize">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntFacetPriorityQueue.Top">
      <summary>
            Returns the least element of the PriorityQueue in constant time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntFacetPriorityQueue.Pop">
      <summary>
            Removes and returns the least element of the PriorityQueue in log(size)
            time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntFacetPriorityQueue.Size">
      <summary>
            Returns the number of elements currently stored in the PriorityQueue.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.IntFacetPriorityQueue.Clear">
      <summary>
            Removes all entries from the PriorityQueue.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.GetFacet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.Next(System.Int32)">
      <summary>
            This version of the next() method applies the minHits from the facet spec before returning the facet and its hitcount
            </summary>
      <param name="minHits">the minHits from the facet spec for CombinedFacetAccessible</param>
      <returns>The next facet that obeys the minHits</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.NextInt">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.IntFacetIterator#nextInt()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedIntFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.LongFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongIteratorNode.Iterator">
      <summary>
            Added in .NET version as an accessor to the _iterator field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongIteratorNode.CurFacet">
      <summary>
            Added in .NET version as an accessor to the _curFacet field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongIteratorNode.CurFacetCount">
      <summary>
            Added in .NET version as an accessor to the _curFacetCount field.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongFacetPriorityQueue">
      <summary>
            Lucene PriorityQueue
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongFacetPriorityQueue.Initialize(System.Int32)">
      <summary>
            Subclass constructors must call this.
            </summary>
      <param name="maxSize">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongFacetPriorityQueue.Top">
      <summary>
            Returns the least element of the PriorityQueue in constant time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongFacetPriorityQueue.Pop">
      <summary>
            Removes and returns the least element of the PriorityQueue in log(size)
            time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongFacetPriorityQueue.Size">
      <summary>
            Returns the number of elements currently stored in the PriorityQueue.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.LongFacetPriorityQueue.Clear">
      <summary>
            Removes all entries from the PriorityQueue.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.GetFacet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.Next(System.Int32)">
      <summary>
            This version of the next() method applies the minHits from the _facet spec before returning the _facet and its hitcount
            </summary>
      <param name="minHits">the minHits from the _facet spec for CombinedFacetAccessible</param>
      <returns>The next _facet that obeys the minHits </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedLongFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.ShortFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortIteratorNode.Iterator">
      <summary>
            Added in .NET version as an accessor to the _iterator field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortIteratorNode.CurFacet">
      <summary>
            Added in .NET version as an accessor to the _curFacet field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortIteratorNode.CurFacetCount">
      <summary>
            Added in .NET version as an accessor to the _curFacetCount field.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortFacetPriorityQueue">
      <summary>
            Lucene PriorityQueue
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortFacetPriorityQueue.Initialize(System.Int32)">
      <summary>
            Subclass constructors must call this.
            </summary>
      <param name="maxSize">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortFacetPriorityQueue.Top">
      <summary>
            Returns the least element of the PriorityQueue in constant time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortFacetPriorityQueue.Pop">
      <summary>
            Removes and returns the least element of the PriorityQueue in log(size)
            time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortFacetPriorityQueue.Size">
      <summary>
            Returns the number of elements currently stored in the PriorityQueue.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.ShortFacetPriorityQueue.Clear">
      <summary>
            Removes all entries from the PriorityQueue.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.GetFacet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.Next(System.Int32)">
      <summary>
            This version of the next() method applies the minHits from the _facet spec before returning the _facet and its hitcount
            </summary>
      <param name="minHits">the minHits from the _facet spec for CombinedFacetAccessible</param>
      <returns>The next _facet that obeys the minHits</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.NextShort">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.ShortFacetIterator#nextShort()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.NextShort(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.ShortFacetIterator#nextShort(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.CombinedShortFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.ComboFacetHandler.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:ComboFacetHandler" />. The separator will be assumed to be ":".
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="dependsOn">List of facets this one depends on for loading.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.ComboFacetHandler.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:ComboFacetHandler" />.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="separator">The separator that is used to delineate the values of the different index fields.</param>
      <param name="dependsOn">List of facets this one depends on for loading.</param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.NextDouble">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.DoubleFacetIterator#nextDouble()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.NextDouble(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.DoubleFacetIterator#nextDouble(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.ValList">
      <summary>
            Added in .NET version as as an accessor to the _valList field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.Facet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultDoubleFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.DefaultFacetIterator">
      <summary>
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultFacetIterator.ValList">
      <summary>
            Added in .NET version as as an accessor to the _valList field.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.NextFloat">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FloatFacetIterator#nextFloat()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.NextFloat(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FloatFacetIterator#nextFloat(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.ValList">
      <summary>
            Added in .NET version as as an accessor to the _valList field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultFloatFacetIterator.Facet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultIntFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultIntFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultIntFacetIterator.NextInt">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.IntFacetIterator#nextInt()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultIntFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultIntFacetIterator.NextInt(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.IntFacetIterator#nextInt(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultIntFacetIterator.ValList">
      <summary>
            Added in .NET version as as an accessor to the _valList field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultIntFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.NextLong">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.LongFacetIterator#nextLong()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.NextLong(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.LongFacetIterator#nextLong(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.ValList">
      <summary>
            Added in .NET version as as an accessor to the _valList field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.Facet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultLongFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator">
      <summary>
            author "Xiaoyang Gu &lt;xgu@linkedin.com&gt;"
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.NextShort">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.ShortFacetIterator#nextShort()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.NextShort(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.ShortFacetIterator#nextShort(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.ValList">
      <summary>
            Added in .NET version as as an accessor to the _valList field.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.Facet">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacet()
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.DefaultShortFacetIterator.FacetCount">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#getFacetCount()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.RuntimeFacetHandler`1">
      <summary>
            Abstract class for RuntimeFacetHandlers. A concrete RuntimeFacetHandler should implement
            the FacetHandlerFactory and RuntimeInitializable so that bobo knows how to create new
            instance of the handler at run time and how to initialize it at run time respectively.
            
            author ymatsuda
            </summary>
      <typeparam name="D">type parameter for FacetData</typeparam>
    </member>
    <member name="M:BoboBrowse.Net.Facets.RuntimeFacetHandler`1.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Constructor that specifying the dependent facet handlers using names.
            </summary>
      <param name="name">the name of this FacetHandler, which is used in FacetSpec and 
            Selection to specify the facet. If we regard a facet as a field, the name is like a field name.</param>
      <param name="dependsOn">Set of names of facet handlers this facet handler depend on for loading.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.RuntimeFacetHandler`1.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="name">the name of this FacetHandler, which is used in FacetSpec and Selection to specify
            the facet. If we regard a facet as a field, the name is like a field name.</param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.DynamicRangeFacetHandler">
      <summary>@author ymatsuda
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.DynamicTimeRangeFacetHandler.#ctor(System.String,System.String,System.Int64,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:DynamicTimeRangeFacetHandler" />.
            The format of range string is dddhhmmss. (ddd: days (000-999), hh : hours (00-23), mm: minutes (00-59), ss: seconds (00-59))
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="dataFacetName">The facet handler this one depends on.</param>
      <param name="currentTime">The number of milliseconds since January 1, 1970 expessed in universal coordinated time (UTC). 
            The <see cref="M:BoboBrowse.Net.Support.DateTimeExtensions.GetTime" /> method can be used to convert the current time to 
            this format, e.g. DateTime.Now.GetTime().</param>
      <param name="ranges">A list of range strings in the format dddhhmmss. (ddd: days (000-999), hh : hours (00-23), mm: minutes (00-59), ss: seconds (00-59))</param>
    </member>
    <member name="T:BoboBrowse.Net.IComparatorFactory">
      <summary>
            Comparator for custom sorting a facet value.
            author jwang
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.IComparatorFactory.NewComparator(BoboBrowse.Net.IFieldValueAccessor,BoboBrowse.Net.Util.BigSegmentedArray)">
      <summary>Providers a Comparator from field values and counts. This is called within a browse. </summary>
      <param name="fieldValueAccessor"> accessor for field values </param>
      <param name="counts"> hit counts </param>
      <returns> Comparator instance </returns>
    </member>
    <member name="M:BoboBrowse.Net.IComparatorFactory.NewComparator">
      <summary>Providers a Comparator. This is called when doing a merge across browses. </summary>
      <returns> Comparator instance </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.GeoRange.Lat">
      <summary>
            Gets the latitude value
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.GeoRange.Lon">
      <summary>
            Gets the longitude value
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.GeoRange.Rad">
      <summary>
            Gets the radius
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.#ctor(System.String,BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData,System.Int32,BoboBrowse.Net.FacetSpec,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="name">name of the Geo Facet</param>
      <param name="dataCache">The data cache for the Geo Facet</param>
      <param name="docBase">the base doc id</param>
      <param name="fspec">the facet spec for this facet</param>
      <param name="predefinedRanges">List of ranges, where each range looks like &lt;lat, lon: rad&gt;</param>
      <param name="miles">variable to specify if the geo distance calculations are in miles. False indicates distance calculation is in kilometers</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.Collect(System.Int32)">
      <summary>
      </summary>
      <param name="docid">The docid for which the facet counts are to be calculated</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.GetFacet(System.String)">
      <summary>
      </summary>
      <param name="value">This value should be one of the user-specified ranges for this Facet Count Collector. Else an
            ArgumentException will be raised</param>
      <returns>The BrowseFacet corresponding to the range value</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.GetFacets">
      <summary>
      </summary>
      <returns>A list containing BrowseFacet objects for each of the user-specified ranges</returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetCountCollector.Parse(System.String)">
      <summary>
      </summary>
      <param name="range">Value should be of the format - lat , lon : radius</param>
      <returns>GeoRange object containing the lat, lon and radius value</returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData">
      <summary>
            Data structure for GeoFacetHandler.
            
            <list type="bullet"><item><description>
                        xValArray array, int of size m, each element is the x coordinate value of the 
                        docid (actually BigFloatArray is used instead of int to avoid requiring large 
                        chunks of consecutive heap allocation)
                    </description></item><item><description>
                        yValArray array, int of size m, each element is the y coordinate value of the 
                        docid (actually BigFloatArray is used instead of int to avoid requiring large 
                        chunks of consecutive heap allocation)
                    </description></item><item><description>
                        zValArray array, int of size m, each element is the z coordinate value of the 
                        docid (actually BigFloatArray is used instead of int to avoid requiring large 
                        chunks of consecutive heap allocation)
                    </description></item></list></summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:GeoFacetData" />.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData.#ctor(BoboBrowse.Net.Util.BigFloatArray,BoboBrowse.Net.Util.BigFloatArray,BoboBrowse.Net.Util.BigFloatArray)">
      <summary>
            Initializes a new instance of <see cref="T:GeoFacetData" />.
            </summary>
      <param name="xvals">
            xValArray array, int of size m, each element is the x coordinate value of the 
            docid (actually BigFloatArray is used instead of int to avoid requiring large 
            chunks of consecutive heap allocation)
            </param>
      <param name="yvals">
            yValArray array, int of size m, each element is the y coordinate value of the 
            docid (actually BigFloatArray is used instead of int to avoid requiring large 
            chunks of consecutive heap allocation)
            </param>
      <param name="zvals">
            zValArray array, int of size m, each element is the z coordinate value of the 
            docid (actually BigFloatArray is used instead of int to avoid requiring large 
            chunks of consecutive heap allocation)
            </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData.NewInstance(System.Int32)">
      <summary>
            Static constructor for BigFloatArray.
            </summary>
      <param name="maxDoc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData.xValArray">
      <summary>
            Gets or sets the _xValArray
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData.yValArray">
      <summary>
            Gets or sets the _yValArray
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.GeoFacetData.zValArray">
      <summary>
            Gets or sets the _zValArray
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:GeoFacetHandler" />.
            </summary>
      <param name="name">Name of the geo facet.</param>
      <param name="latFieldName">Name of the Lucene.Net index field that stores the latitude value.</param>
      <param name="lonFieldName">Name of the Lucene.Net index field that stores the longitude value.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:GeoFacetHandler" />.
            </summary>
      <param name="name">Name of the geo facet.</param>
      <param name="latFieldName">Name of the Lucene.Net index field that stores the latitude value.</param>
      <param name="lonFieldName">Name of the Lucene.Net index field that stores the longitude value.</param>
      <param name="miles">variable to specify if the geo distance calculations are in miles. False indicates distance calculation is in kilometers</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoFacetHandler.BuildRandomAccessFilter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Builds a random access filter.
            </summary>
      <param name="value">Should be of the form: lat, lon: rad</param>
      <param name="selectionProperty">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetCountCollector">
      <summary>
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetCountCollector.Collect(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.facets.FacetCountCollector#collect(int)
            </summary>
      <param name="docid">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetCountCollector.CollectAll">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.facets.FacetCountCollector#collectAll()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetCountCollector.GetCountDistribution">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.facets.FacetCountCollector#getCountDistribution()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetCountCollector.GetFacet(System.String)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetAccessible#getFacet(java.lang.String)
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetCountCollector.GetFacets">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetAccessible#getFacets()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetCountCollector.Name">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.facets.FacetCountCollector#getName()
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetHandler">
      <summary>
            Used to filter documents based on distance metric – latitude and longitude. This is a 
            dynamic facet handler that builds on top of two range facet handlers on two fields – 
            latitude and longitude. The distance metric calculation in this facet handler is the 
            delta of document’s latitude/longitude and the latitude/longitude values of the 
            user’s point of interest.
            
            Filters:
            
            Given a term of the format "&lt;latitude, longitude, radius&gt;", we convert it to two 
            ranges ‘– radius, latitude + radius’ and ‘– radius, longitude + radius’ and pass 
            these two ranges to the two underlying range facet handlers.
            
            FacetCountCollector:
            
            A count array, int of size t, is created to store the hit count for each term, 
            given a match docid, count[orderdocid] is incremented. Facets are created by 
            grouping all elements in the term array with count &gt;= minHitCount specified 
            by the FacetSpec, into desired range facets of the format &lt;latitude, longitude, radius&gt;.
            
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.GeoSimpleFacetHandler.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:GeoSimpleFacetHandler" />.
            </summary>
      <param name="name">Name of the geo facet.</param>
      <param name="latFacetName">Name of the Lucene.Net index field that stores the latitude value.</param>
      <param name="longFacetName">Name of the Lucene.Net index field that stores the longitude value.</param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.HistogramFacetHandler`1">
      <summary>
            A runtime facet handler that works on top of a number based facet handler, called the data facet handler. 
            T is a subtype of Number. T and the type of the term list of the data facet handler must match. 
            If the the data facet handler is an instance of RangeFacetHandler, it should not have the predefined ranges, 
            otherwise loading of HistogramFacetHandler will fail.
            
            You must specify the name of the data facet handler, the range (start and end) of values you want to collect 
            a histogram and the unit (the width of a "bin") when you construct the HistogramFacetHandler object.
            
            Supports BrowseSelection. It simply passes the selection to the data facet handler to build a filter. 
            ExpandSelection of FacetSpec must be set to true to collect counts of hits that don't match the selection.
            
            The facet values returned by the count collector are the bin numbers starting from 0. They are not the 
            values from the data facet handlers. It is application's responsibility to map the bin numbers to 
            intervals of the actual values.
            </summary>
      <typeparam name="T">A numeric data type.</typeparam>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.HistogramFacetHandler`1.HistogramCollector.GetCountDistribution">
      <summary>
            not supported
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.HistogramFacetHandler`1.#ctor(System.String,System.String,`0,`0,`0)">
      <summary>
            Initializes a new instance of <see cref="T:HistogramFacetHandler" />.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="dataHandlerName">The facet handler this one depends upon.</param>
      <param name="start">The start of the range of values to collect a histogram.</param>
      <param name="end">The end of the range of values to collect a histogram.</param>
      <param name="unit">The unit (the width of a "bin").</param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler">
      <summary>
            Similar to <see cref="T:SimpleFacetHandler" />, allows a document to have multiple values. 
            When being indexed, this field can be tokenized. Or alternatively, one can index multiple 
            values in multiple document fields under the same field name.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String,System.String,BoboBrowse.Net.Facets.Data.TermListFactory,Lucene.Net.Index.Term,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name,
            Lucene.Net index field name, <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance, size payload term, 
            and list of facet handlers this one depends on.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
      <param name="sizePayloadTerm">
      </param>
      <param name="dependsOn">List of facets this one depends on for loading.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String,System.String,BoboBrowse.Net.Facets.Data.TermListFactory,Lucene.Net.Index.Term)">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name,
            Lucene.Net index field name, <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance, and size payload term.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
      <param name="sizePayloadTerm">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String,BoboBrowse.Net.Facets.Data.TermListFactory,Lucene.Net.Index.Term)">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name,
            <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance, and size payload term.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
      <param name="sizePayloadTerm">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String,System.String,BoboBrowse.Net.Facets.Data.TermListFactory)">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name,
            Lucene.Net index field name, and <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String,BoboBrowse.Net.Facets.Data.TermListFactory)">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name
            and <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance.
            The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name
            and Lucene.Net index field name.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String)">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name.
            The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.MultiValueFacetHandler.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:MultiValueFacetHandler" /> with the specified name
            and list of facet handlers this one depends on. The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="dependsOn">List of facets this one depends on for loading.</param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.PathFacetIterator">
      <summary>
            author nnarkhed
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetIterator.#ctor(System.Collections.Generic.IEnumerable{BoboBrowse.Net.BrowseFacet})">
      <summary>
      </summary>
      <param name="facets">a value ascending sorted list of BrowseFacets</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetIterator.Format(System.Object)">
      <summary>
            The string from here should be already formatted. No need to reformat.
            see com.browseengine.bobo.api.FacetIterator#format(java.lang.Object)
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.SimpleFacetHandler">
      <summary>
            Used when there is a discrete set of facet values, for example: color, with values: red, green, blue, white, black. 
            Each document can have only 1 value in this field. When being indexed, this field should not be tokenized.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleFacetHandler.#ctor(System.String,System.String,BoboBrowse.Net.Facets.Data.TermListFactory,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:SimpleFacetHandler" /> with the specified name, Lucene.Net index field name, 
            <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance, and a list of facets this one depends on for loading.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
      <param name="dependsOn">List of facets this one depends on for loading.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleFacetHandler.#ctor(System.String,System.String,BoboBrowse.Net.Facets.Data.TermListFactory)">
      <summary>
            Initializes a new instance of <see cref="T:SimpleFacetHandler" /> with the specified name, Lucene.Net index field name, 
            and <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleFacetHandler.#ctor(System.String,BoboBrowse.Net.Facets.Data.TermListFactory)">
      <summary>
            Initializes a new instance of <see cref="T:SimpleFacetHandler" /> with the specified name and <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance.
            The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleFacetHandler.#ctor(System.String)">
      <summary>
            Initializes a new instance of <see cref="T:SimpleFacetHandler" /> with the specified name.
            The Lucene.Net index field must have the same name. A <see cref="T:BoboBrowse.Net.Facets.Data.TermStringList" /> will be
            used to store the data elements for comparison.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleFacetHandler.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:SimpleFacetHandler" /> with the specified name
            and Lucene.Net index field name. A <see cref="T:BoboBrowse.Net.Facets.Data.TermStringList" /> will be
            used to store the data elements for comparison.
            </summary>
      <param name="name">The name of the facet handler.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
    </member>
    <member name="T:BoboBrowse.Net.MapRed.IBoboMapFunctionWrapper">
      <summary>
            Is the part of the bobo request, that maintains the map result intermediate state
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.MapRed.IBoboMapFunctionWrapper.MapFullIndexReader(BoboBrowse.Net.BoboIndexReader,BoboBrowse.Net.Facets.IFacetCountCollector[])">
      <summary>
            When there is no filter, map reduce will try to map the entire segment
            </summary>
      <param name="reader">
      </param>
      <param name="facetCountCollectors">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.MapRed.IBoboMapFunctionWrapper.MapSingleDocument(System.Int32,BoboBrowse.Net.BoboIndexReader)">
      <summary>
            The basic callback method for a single doc
            </summary>
      <param name="docId">
      </param>
      <param name="reader">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.MapRed.IBoboMapFunctionWrapper.FinalizeSegment(BoboBrowse.Net.BoboIndexReader,BoboBrowse.Net.Facets.IFacetCountCollector[])">
      <summary>
            The callback method, after the segment was processed
            </summary>
      <param name="reader">
      </param>
      <param name="facetCountCollectors">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.MapRed.IBoboMapFunctionWrapper.FinalizePartition">
      <summary>
            The callback method, after the partition was processed
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.FacetSpec">
      <summary>
            Specifies how facets are to be returned for a browse, e.g. top 10 facets of car types ordered by count with a min count of 5.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.FacetSpec.FacetSortSpec">
      <summary>Sort options for facets.</summary>
    </member>
    <member name="F:BoboBrowse.Net.FacetSpec.FacetSortSpec.OrderValueAsc">
      <summary>Order by the facet values in lexicographical ascending order.</summary>
    </member>
    <member name="F:BoboBrowse.Net.FacetSpec.FacetSortSpec.OrderHitsDesc">
      <summary>Order by the facet hit counts in descending order.</summary>
    </member>
    <member name="F:BoboBrowse.Net.FacetSpec.FacetSortSpec.OrderByCustom">
      <summary>Custom order, must have a comparator.</summary>
    </member>
    <member name="M:BoboBrowse.Net.FacetSpec.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:FacetSpec" /> class.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.FacetSpec.ToString">
      <summary>
            Gets a string representation of the current <see cref="T:FacetSpec" /> instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.FacetSpec.Clone">
      <summary>
            Creates a clone of the current FacetSpec including all properties.
            </summary>
      <returns>The cloned instance.</returns>
    </member>
    <member name="P:BoboBrowse.Net.FacetSpec.CustomComparatorFactory">
      <summary>
            Gets or sets a custom comparator factory instance. This is required when specifying 
            <see cref="T:FacetSortSpec.OrderByCustom" /> for the <see cref="P:OrderBy" /> property.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.FacetSpec.MinHitCount">
      <summary>
            Gets or sets the minimum number of hits a choice would need to have to be returned.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.FacetSpec.OrderBy">
      <summary>
            Gets or sets the current choice sort order.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.FacetSpec.MaxCount">
      <summary>
            Gets or sets the maximum number of choices to return. Default = 0 which means all.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.FacetSpec.ExpandSelection">
      <summary>Gets or sets whether we are expanding sibling choices.</summary>
    </member>
    <member name="P:BoboBrowse.Net.FacetSpec.Properties">
      <summary>
            Gets or sets custom properties for the facet search. For example, 
            <see cref="T:BoboBrowse.Net.Facets.Attribute.AttributeFacetHandler" /> 
            uses this to perform custom facet filtering.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory">
      <summary>
            This interface is intended for using with RuntimeFacetHandler, which typically
            have local data that make them not only NOT thread safe but also dependent on
            request. So it is necessary to have different instance for different client or
            request. Typically, the new instance need to be initialized before use.
            
            author xiaoyang
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory.Get(BoboBrowse.Net.Facets.FacetHandlerInitializerParam)">
      <summary>
      </summary>
      <param name="params">the data used to initialize the RuntimeFacetHandler.</param>
      <returns>a new instance of </returns>
    </member>
    <member name="P:BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory.Name">
      <summary>
            Gets the facet name of the RuntimeFacetHandler it creates.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.IRuntimeFacetHandlerFactory.IsLoadLazily">
      <summary>
            Gets if this facet support empty params or not.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.AbstractRuntimeFacetHandlerFactory.IsLoadLazily">
      <summary>
            if this facet support empty params or not. By default it returns false.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.CombinedFacetAccessible">
      <summary>
            author nnarkhed
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.FacetHandlerInitializerParam">
      <summary>
            The dummy interface to indicate that a class type can be used for initializing RuntimeFacetHandlers.
            
            author xiaoyang
            </summary>
    </member>
    <member name="F:BoboBrowse.Net.Facets.FacetHandlerInitializerParam.tid">
      <summary>
            The transaction ID
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.FacetHandlerInitializerParam.Tid">
      <summary>
            Get or sets the transaction ID.
            </summary>
      <returns>the transaction ID.</returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.DefaultFacetHandlerInitializerParam">
      <summary>
            The 'generic' type for FacetHandler initialization parameters for the purpose of easy serialization.
            When this type is used, it is completely up to the program logic of the utilizing RuntimeFacetHandler
            and its client code to find the data at the right place.
            
            author ymatsuda
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory">
      <summary>
            Similar to the original Java version of the PredefinedTermListFactory, but has been optimized to use
            .NET generics and .NET string formatting.
            
            Types supported:
            <list type="bullet"><item>int</item><item>float</item><item>char</item><item>double</item><item>short</item><item>long</item><item>DateTime</item></list></summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory.#ctor(System.Type,System.String,System.IFormatProvider)">
      <summary>
            Initializes a new instance of <see cref="T:PredefinedTermListFactory" />.
            </summary>
      <param name="type">The native type of the values in the list. 
            Supported types are <see cref="T:System.Int32" />, <see cref="T:System.Single" />, <see cref="T:System.Char" />, 
            <see cref="T:System.Double" />, <see cref="T:System.Int16" />, <see cref="T:System.Int64" />, <see cref="T:System.DateTime" />.</param>
      <param name="formatString">The format string that will be used to format each value in the list for output display.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:PredefinedTermListFactory" />.
            </summary>
      <param name="type">The native type of the values in the list. 
            Supported types are <see cref="T:System.Int32" />, <see cref="T:System.Single" />, <see cref="T:System.Char" />, 
            <see cref="T:System.Double" />, <see cref="T:System.Int16" />, <see cref="T:System.Int64" />, <see cref="T:System.DateTime" />.</param>
      <param name="formatString">The format string that will be used to format each value in the list for output display.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory.#ctor(System.Type)">
      <summary>
            Initializes a new instance of <see cref="T:PredefinedTermListFactory" />.
            </summary>
      <param name="type">The native type of the values in the list. 
            Supported types are <see cref="T:System.Int32" />, <see cref="T:System.Single" />, <see cref="T:System.Char" />, 
            <see cref="T:System.Double" />, <see cref="T:System.Int16" />, <see cref="T:System.Int64" />, <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory`1">
      <summary>
            Similar to the original Java version of the PredefinedTermListFactory, but has been optimized to use
            .NET generics and .NET string formatting.
            
            Types supported:
            <list type="bullet"><item>int</item><item>float</item><item>char</item><item>double</item><item>short</item><item>long</item><item>DateTime</item></list></summary>
      <typeparam name="TSupported">The type of term list to build. Supported types are <see cref="T:System.Int32" />, <see cref="T:System.Single" />, <see cref="T:System.Char" />, <see cref="T:System.Double" />, <see cref="T:System.Int16" />, <see cref="T:System.Int64" />, <see cref="T:System.DateTime" />.</typeparam>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory`1.#ctor(System.String,System.IFormatProvider)">
      <summary>
            Initializes a new instance of <see cref="T:PredefinedTermListFactory{TSupported}" />.
            </summary>
      <param name="formatString">The format string that will be used to format each value in the list for output display.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of <see cref="T:PredefinedTermListFactory{TSupported}" />.
            </summary>
      <param name="formatString">The format string that will be used to format each value in the list for output display.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Data.PredefinedTermListFactory`1.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:PredefinedTermListFactory{TSupported}" />.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Data.TermDateList">
      <summary>
            Internal data are stored in a long[] with values generated from <see cref="M:DateTime.ToBinary" />.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Facets.FacetDataNone.Instance">
      <summary>
            Added in .NET version as an accessor to the instance static field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.CompactMultiValueFacetHandler">
      <summary>
            Same as <see cref="T:MultiValueFacetHandler" />, multiple values are allowed, but the total possible values are limited to 32. 
            This is more efficient than <see cref="T:MultiValueFacetHandler" /> and has a smaller memory footprint.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CompactMultiValueFacetHandler.#ctor(System.String,System.String,BoboBrowse.Net.Facets.Data.TermListFactory)">
      <summary>
            Initializes a new instance of <see cref="T:CompactMultiValueFacetHandler" /> with the specified name,
            Lucene.Net index field name, and <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CompactMultiValueFacetHandler.#ctor(System.String,BoboBrowse.Net.Facets.Data.TermListFactory)">
      <summary>
            Initializes a new instance of <see cref="T:CompactMultiValueFacetHandler" /> with the specified name
            and <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance.
            The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="termListFactory">A <see cref="T:BoboBrowse.Net.Facets.Data.TermListFactory" /> instance that will create a 
            specialized <see cref="T:BoboBrowse.Net.Facets.Data.ITermValueList" /> to compare the field values, typically using their native or primitive data type.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CompactMultiValueFacetHandler.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:CompactMultiValueFacetHandler" /> with the specified name
            and Lucene.Net index field name.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="indexFieldName">The name of the Lucene.Net index field this handler will utilize.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.CompactMultiValueFacetHandler.#ctor(System.String)">
      <summary>
            Initializes a new instance of <see cref="T:CompactMultiValueFacetHandler" /> with the specified name.
            The Lucene.Net index field must have the same name.
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
    </member>
    <member name="P:BoboBrowse.Net.Facets.Filter.FacetRangeFilter.FacetRangeValueConverter.Instance">
      <summary>
            Added in .NET version as an accessor to the instance static field.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:BoboBrowse.Net.Facets.FacetCountCollector_Fields.EMPTY_FACET_LIST">
      <summary>Empty facet list.  </summary>
    </member>
    <member name="T:BoboBrowse.Net.Facets.Impl.PathFacetHandler">
      <summary>
            Used to denote facet values with hierarchical structure, for example: "A/B/C/D". 
            Multiple values in this field are allowed if constructor parameter multiValue is set to true. 
            When being indexed, this field should not be tokenized.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetHandler.#ctor(System.String)">
      <summary>
            Initializes a new instance of <see cref="T:PathFacetHandler" /> with the specified name.
            The Lucene.Net index field must have the same name. The field separator is assumed to be "/".
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetHandler.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:PathFacetHandler" /> with the specified name.
            The Lucene.Net index field must have the same name. The field separator is assumed to be "/".
            </summary>
      <param name="name">The facet handler name. Must be the same value as the Lucene.Net index field name.</param>
      <param name="multiValue">Indicates whether multiple values are allowed in this field.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetHandler.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:PathFacetHandler" /> with the specified name and 
            Lucene.Net index field name. The field separator is assumed to be "/"
            </summary>
      <param name="name">The name of the facet handler.</param>
      <param name="indexedName">The name of the Lucene.Net index field this handler will utilize.</param>
      <param name="multiValue">Indicates whether multiple values are allowed in this field.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetHandler.SetStrict(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
      <summary>Sets is strict applied for counting. Used if the field is of type <b><i>path</i></b>. </summary>
      <param name="props">The properties dictionary to set the property value on.</param>
      <param name="strict"> is strict applied </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetHandler.SetDepth(System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
      <summary>Sets the depth.  Used if the field is of type <b><i>path</i></b>. </summary>
      <param name="props">The properties dictionary to set the property value on.</param>
      <param name="depth">depth </param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetHandler.IsStrict(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary> Gets if strict applied for counting. Used if the field is of type <b><i>path</i></b>. </summary>
      <returns> is strict applied </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.PathFacetHandler.GetDepth(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary> Gets the depth.  Used if the field is of type <b><i>path</i></b>. </summary>
      <returns> depth </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleGroupbyFacetHandler.GroupbyFacetCountCollector.GroupByFacetIterator.Next">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleGroupbyFacetHandler.GroupbyFacetCountCollector.GroupByFacetIterator.HasNext">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#hasNext()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleGroupbyFacetHandler.GroupbyFacetCountCollector.GroupByFacetIterator.Remove">
      <summary>
            (non-Javadoc)
            see java.util.Iterator#remove()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleGroupbyFacetHandler.GroupbyFacetCountCollector.GroupByFacetIterator.Next(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.api.FacetIterator#next(int)
            </summary>
      <param name="minHits">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleGroupbyFacetHandler.GroupbyFacetCountCollector.GroupByFacetIterator.Format(System.Object)">
      <summary>
            The string from here should be already formatted. No need to reformat.
            see com.browseengine.bobo.api.FacetIterator#format(java.lang.Object)
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleGroupbyFacetHandler.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Initializes a new instance of <see cref="T:SimpleFacetHandler" /> with the specified name, 
            dependent facet handler names, and separator.
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="dependsOn">List of facet handler names that will be included in the group.</param>
      <param name="separator">The separator string that will be used to delineate each value in the group.</param>
    </member>
    <member name="M:BoboBrowse.Net.Facets.Impl.SimpleGroupbyFacetHandler.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of <see cref="T:SimpleFacetHandler" /> with the specified name and 
            dependent facet handler names. The separator is assumed to be ",".
            </summary>
      <param name="name">The facet handler name.</param>
      <param name="dependsOn">List of facet handler names that will be included in the group.</param>
    </member>
    <member name="T:BoboBrowse.Net.MultiBoboBrowser">
      <summary>
            Provides implementation of Browser for multiple Browser instances.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.MultiBoboBrowser.BrowseFacetValueComparator">
      <summary>
            Compare BrowseFacets by their value
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.#ctor(BoboBrowse.Net.IBrowsable[])">
      <summary>
      </summary>
      <param name="browsers">Browsers to search on</param>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.Browse(BoboBrowse.Net.BrowseRequest,Lucene.Net.Search.Collector,System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible})">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" />.
            The results are put into a Lucene.Net <see cref="T:Lucene.Net.Search.Collector" /> and a <see cref="T:System.Collections.Generic.IDictionary{System.String, IFacetAccessible}" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <param name="hitCollector">A <see cref="T:Lucene.Net.Search.Collector" /> for the hits generated during a search.</param>
      <param name="facetMap">A dictionary of all of the facet collections (output).</param>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.Browse(BoboBrowse.Net.BrowseRequest,Lucene.Net.Search.Collector,System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible},System.Int32)">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" />.
            The results are put into a Lucene.Net <see cref="T:Lucene.Net.Search.Collector" /> and a <see cref="T:System.Collections.Generic.IDictionary{System.String, IFacetAccessible}" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <param name="hitCollector">A <see cref="T:Lucene.Net.Search.Collector" /> for the hits generated during a search.</param>
      <param name="facetMap">A dictionary of all of the facet collections (output).</param>
      <param name="start">The offset value for the document number.</param>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.Browse(BoboBrowse.Net.BrowseRequest,Lucene.Net.Search.Weight,Lucene.Net.Search.Collector,System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible},System.Int32)">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" /> and a <see cref="T:Lucene.Net.Search.Weight" />.
            The results are put into a Lucene.Net <see cref="T:Lucene.Net.Search.Collector" /> and a <see cref="T:System.Collections.Generic.IDictionary{System.String, IFacetAccessible}" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <param name="weight">A <see cref="T:Lucene.Net.Search.Weight" /> instance to alter the score of the queries in a multiple index scenario.</param>
      <param name="hitCollector">A <see cref="T:Lucene.Net.Search.Collector" /> for the hits generated during a search.</param>
      <param name="facetMap">A dictionary of all of the facet collections (output).</param>
      <param name="start">The offset value for the document number.</param>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.Browse(BoboBrowse.Net.BrowseRequest)">
      <summary>
            Generates a merged BrowseResult from the supplied <see cref="T:BrowseRequest" />.
            </summary>
      <param name="req">
        <see cref="T:BrowseRequest" /> for generating the facets.</param>
      <returns>
        <see cref="T:BrowseResult" /> of the results corresponding to the <see cref="T:BrowseRequest" />.</returns>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.GetFieldVal(System.Int32,System.String)">
      <summary>
            Return the string representation of the values of a field for the given doc.
            </summary>
      <param name="docid">The document id.</param>
      <param name="fieldname">The field name.</param>
      <returns>A string array of field values.</returns>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.GetRawFieldVal(System.Int32,System.String)">
      <summary>
            Return the raw (primitive) field values for the given doc.
            </summary>
      <param name="docid">The document id.</param>
      <param name="fieldname">The field name.</param>
      <returns>An object array of raw field values.</returns>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.GetSubBrowsers">
      <summary>
            Gets the array of sub-browsers.
            </summary>
      <returns>sub-browsers</returns>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.SubBrowser(System.Int32)">
      <summary>
            Gets the sub-browser for a given docid
            </summary>
      <param name="docid">sub-browser instance</param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.NumDocs">
      <summary>
            Gets the total number of documents in all sub browser instances.
            </summary>
      <returns>The total number of documents.</returns>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.GetFacetHandler(System.String)">
      <summary>
            Gets a facet handler by facet name.
            </summary>
      <param name="name">The facet name.</param>
      <returns>The facet handler instance.</returns>
    </member>
    <member name="M:BoboBrowse.Net.MultiBoboBrowser.SetFacetHandler(BoboBrowse.Net.Facets.IFacetHandler)">
      <summary>
            Sets a facet handler for each sub-browser instance.
            </summary>
      <param name="facetHandler">A facet handler.</param>
    </member>
    <member name="T:BoboBrowse.Net.BoboBrowser">
      <summary>
             This class implements the browsing functionality.
             author ymatsuda
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BoboBrowser.#ctor(BoboBrowse.Net.BoboIndexReader)">
      <summary>
            Initializes a new instance of the <see cref="T:BoboBrowser" /> class with the specified <see cref="T:BoboIndexReader" /> instance.
            </summary>
      <param name="reader">An open <see cref="T:BoboIndexReader" /> instance.</param>
    </member>
    <member name="M:BoboBrowse.Net.BoboBrowser.GetFacetHandler(System.String)">
      <summary>
            Gets a facet handler by facet name.
            </summary>
      <param name="name">The facet name.</param>
      <returns>The facet handler instance.</returns>
    </member>
    <member name="P:BoboBrowse.Net.BoboBrowser.FacetNames">
      <summary>
            Gets a set of facet names.
            </summary>
      <returns>Set of facet names.</returns>
    </member>
    <member name="T:BoboBrowse.Net.BrowseHit">
      <summary>A hit from a browse.</summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseHit.GetFields(System.String)">
      <summary>
            Get the field values.
            </summary>
      <param name="field">field name</param>
      <returns>field value array</returns>
      <seealso cref="M:BoboBrowse.Net.BrowseHit.GetField(System.String)" />
    </member>
    <member name="M:BoboBrowse.Net.BrowseHit.GetRawFields(System.String)">
      <summary>
            Get the raw field values.
            </summary>
      <param name="field">field name</param>
      <returns>field value array</returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseHit.GetField(System.String)">
      <summary>
            Gets the field value by field name.
            </summary>
      <param name="field">field name</param>
      <returns>field value</returns>
      <seealso cref="M:BoboBrowse.Net.BrowseHit.GetFields(System.String)" />
    </member>
    <member name="M:BoboBrowse.Net.BrowseHit.GetRawField(System.String)">
      <summary>
            Get the raw field value.
            </summary>
      <param name="field">field name</param>
      <returns>raw field value</returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseHit.ToString">
      <summary>
            Gets a string representation of the current BrowseHit.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.Score">
      <summary>
            Gets or sets the score.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.TermFreqMap">
      <summary>
            Gets or sets a dictionary of field names to <see cref="T:TermFrequencyVector" /> instances. These are populated when specified in the <see cref="P:BrowseRequest.TermVectorsToFetch" /> property.
            A term vector is a list of the document's terms and their number of occurrences in that document.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.GroupPosition">
      <summary>
            Gets or sets the position of the <see cref="P:GroupField" /> inside groupBy request.
            NOTE: This does not appear to be in use by BoboBrowse.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.GroupField">
      <summary>
            Gets or sets the group field inside groupBy request.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.GroupValue">
      <summary>
            Gets or sets the string value of the field that is currently the groupBy request.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.RawGroupValue">
      <summary>
            Gets or sets the primitive value of the field that is currently the groupBy request.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.GroupHitsCount">
      <summary>
            Gets or sets the total FacetValueHitCount of the groupBy request.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.GroupHits">
      <summary>
            Gets or sets the hits of the group.
            NOTE: This field does not appear to be in use by BoboBrowse.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.Explanation">
      <summary>
            Gets or sets the <see cref="T:Lucene.Net.Search.Explanation" />. This will be set if the <see cref="P:BrowseRequest.ShowExplanation" /> property is set to true.
            An <see cref="T:Lucene.Net.Search.Explanation" /> describes the score computation for document and query.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.Comparable">
      <summary>
            Gets or sets the <see cref="T:System.IComparable" /> value that is used to compare the current hit to other hits for sorting purposes.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.DocId">
      <summary>
            Gets or sets the internal document id.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.FieldValues">
      <summary>
            Gets or sets the field values.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.RawFieldValues">
      <summary>
            Gets or sets the raw field value map.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseHit.StoredFields">
      <summary>
            Gets or sets the stored fields (a reference to the Lucene.Net Document).
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.BrowseResult">
      <summary>
            Result of a browse operation.
            </summary>
    </member>
    <member name="F:BoboBrowse.Net.BrowseResult.tid">
      <summary>
            The transaction ID
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BrowseResult" /> class.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.BrowseResult.GetFacetAccessor(System.String)">
      <summary>
            Get the facets by name
            </summary>
      <param name="name">name</param>
      <returns>IFacetAccessible instance corresponding to the name</returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseResult.AddFacets(System.String,BoboBrowse.Net.IFacetAccessible)">
      <summary>
            Add a container full of choices.
            </summary>
      <param name="name">
      </param>
      <param name="facets">container full of facets</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseResult.AddAll(System.Collections.Generic.IDictionary{System.String,BoboBrowse.Net.IFacetAccessible})">
      <summary>
            Add all of the given <see cref="T:IFacetAccessible" /> to this <see cref="T:BrowseResult" />.
            </summary>
      <param name="facets">map of facets to add to the result set</param>
    </member>
    <member name="M:BoboBrowse.Net.BrowseResult.ToString">
      <summary>
            Gets a string representation of the <see cref="T:BoboBrowse.Net.BrowseResult" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.BrowseResult.AddError(System.String)">
      <summary>
            Adds an error message to the result.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.Tid">
      <summary>
            Get or sets the transaction ID.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.GroupAccessibles">
      <summary>
            Gets or sets the group accessible.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.SortCollector">
      <summary>
            Get or sets the sort collector.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.NumHits">
      <summary>
            Gets or sets the hit count.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.NumGroups">
      <summary>
            Gets or sets the group count.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.TotalDocs">
      <summary>
            Gets or sets the total number of docs in the index.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.Hits">
      <summary>
            Gets or sets the hits.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.Time">
      <summary>
            Gets or sets the search time in milliseconds.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.FacetMap">
      <summary>
            Gets all the facet collections.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.MapReduceResult">
      <summary>
            Is the part of the bobo request, that maintains the map result intermediate state.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.BrowseResult.BoboErrors">
      <summary>
            Gets a list of all error messages for the current result.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Search.Section.SectionSearchQueryPlan.NodeQueue">
      <summary>
            Priority queue of Nodes.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Search.Section.AbstractTerminalNode">
      <summary>
            An abstract class for terminal nodes of SectionSearchQueryPlan
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Search.Section.AndNode">
      <summary>
            AND operator node for SectionSearchQueryPlan
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Search.Section.AndNotNode">
      <summary>
            AND-NOT operator node for SectionSearchQueryPlan
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Search.Section.IntMetaDataQuery.#ctor(Lucene.Net.Index.Term,BoboBrowse.Net.Search.Section.IntMetaDataQuery.Validator)">
      <summary>
            constructs IntMetaDataQueryQuery
            </summary>
      <param name="term">
      </param>
      <param name="validator">
      </param>
    </member>
    <member name="T:BoboBrowse.Net.Search.Section.OrNode">
      <summary>
            OR operator node for SectionSearchQueryPlan
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Search.Section.PhraseNode">
      <summary>
            Phrase operator node for SectionSearchQUeryPlan
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Search.Section.SectionSearchQuery.#ctor(Lucene.Net.Search.Query)">
      <summary>
            constructs SectionSearchQuery
            </summary>
      <param name="query">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Search.Section.SectionSearchQueryPlanBuilder.GetPlan(Lucene.Net.Search.Query)">
      <summary>
            Gets a query plan for the given query.
            It is assumed that <code>query</code> is already rewritten before this call.
            </summary>
      <param name="query">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Search.Section.TermNode.PositionInPhrase">
      <summary>
            Added in the .NET version as an accessor to the _positionInPhrase field.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Search.Section.UnaryNotNode">
      <summary>
            UNARY-NOT operator node
            (this node is not supported by SectionSearchQueryPlan)
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.DateTimeExtensions.GetTime(System.DateTime)">
      <summary>
            Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this DateTime object 
            in universal coordinated time (UTC).
            </summary>
      <param name="date">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.IListExtensions.RemoveElements``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
            Removes elements of this type-specific list
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="list">
      </param>
      <param name="from">the start index (inclusive).</param>
      <param name="to">the end index (exclusive).</param>
    </member>
    <member name="T:BoboBrowse.Net.Support.RangeStringFormatter">
      <summary>
            Provides the means to customize the format of the range strings of a facet for display on the user interface.<br /><br />
            This class is intended for use with the <see cref="T:BoboBrowse.Net.Facets.Impl.RangeFacetHandler" /> type. A 
            <see cref="T:BoboBrowse.Net.Facets.Impl.RangeFacetHandler" /> requires a very rigid string format to be supplied to it.
            The range string has 3 purposes:
            <list type="number"><item><description>To define the lower and upper bound of the range</description></item><item><description>To provide lexical sort order so the range facets can be sorted ascending or descending.</description></item><item><description>To act as a key for facet value selection.</description></item></list>
            Because of these constraints, it is best to leave the range strings that are passed to the 
            <see cref="T:BoboBrowse.Net.Facets.Impl.RangeFacetHandler" /> in this rigid format. This class 
            is intended as an aid to be able to format the ranges in a more user-friendly way for display on the user interface.
            Note that you still will need to track the values of the facets so selections by the user can be made 
            using the original facet value string.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="type">The underlying data type of the facet handler.</param>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound.  
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter.#ctor(System.Type,System.String,System.IFormatProvider)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="type">The underlying data type of the facet handler.</param>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound. 
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter.#ctor(System.Type,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="type">The underlying data type of the facet handler.</param>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound.  
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
      <param name="openLowerBoundFormat">The new format of the open lower bound string, if different from the format. 
            This can be used to provide a customized format string, such as "Less than $10.00" when the lower bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
      <param name="openUpperBoundFormat">The new format of the open upper bound string, if different from the format.
            This can be used to provide a customized format string, such as "$500.00 and Up" when the upper bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter.#ctor(System.Type,System.String,System.String,System.String,System.IFormatProvider)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="type">The underlying data type of the facet handler.</param>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound. 
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
      <param name="openLowerBoundFormat">The new format of the open lower bound string, if different from the format. 
            This can be used to provide a customized format string, such as "Less than $10.00" when the lower bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
      <param name="openUpperBoundFormat">The new format of the open upper bound string, if different from the format.
            This can be used to provide a customized format string, such as "$500.00 and Up" when the upper bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter.Format(System.String)">
      <summary>
            Provides a custom format for a range string for display on the user interface.
            </summary>
      <param name="rangeString">A range string that represents a browse facet.</param>
      <returns>The custom formatted range string.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter.ParseValues(System.String,System.Object@,System.Boolean@,System.Object@,System.Boolean@)">
      <summary>
            Parses the individual values out of a range string.
            </summary>
      <param name="rangeString">The range string.</param>
      <param name="lower">The lower bound in its native type.</param>
      <param name="lowerOpen">True if the lower bound is open-ended; otherwise false.</param>
      <param name="upper">The upper bound in its native type.</param>
      <param name="upperOpen">True if the upper bound is open-ended; otherwise false.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter.Parse(System.String)">
      <summary>
            Parses a range value into its native type.
            </summary>
      <param name="value">A range value.</param>
      <returns>The range value converted to its native type.</returns>
    </member>
    <member name="T:BoboBrowse.Net.Support.RangeStringFormatter`1">
      <summary>
            Provides the means to customize the format of the range strings of a facet for display on the user interface.<br /><br />
            This class is intended for use with the <see cref="T:BoboBrowse.Net.Facets.Impl.RangeFacetHandler" /> type. A 
            <see cref="T:BoboBrowse.Net.Facets.Impl.RangeFacetHandler" /> requires a very rigid string format to be supplied to it.
            The range string has 3 purposes:
            <list type="number"><item><description>To define the lower and upper bound of the range</description></item><item><description>To provide lexical sort order so the range facets can be sorted ascending or descending.</description></item><item><description>To act as a key for facet value selection.</description></item></list>
            Because of these constraints, it is best to leave the range strings that are passed to the 
            <see cref="T:BoboBrowse.Net.Facets.Impl.RangeFacetHandler" /> in this rigid format. This class 
            is intended as an aid to be able to format the ranges in a more user-friendly way for display on the user interface.
            Note that you still will need to track the values of the facets so selections by the user can be made 
            using the original facet value string.
            </summary>
      <typeparam name="T">The underlying data type of the facet handler.</typeparam>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound.  
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter`1.#ctor(System.String,System.IFormatProvider)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound. 
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter`1.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound.  
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
      <param name="openLowerBoundFormat">The new format of the open lower bound string, if different from the format. 
            This can be used to provide a customized format string, such as "Less than $10.00" when the lower bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
      <param name="openUpperBoundFormat">The new format of the open upper bound string, if different from the format.
            This can be used to provide a customized format string, such as "$500.00 and Up" when the upper bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.RangeStringFormatter`1.#ctor(System.String,System.String,System.String,System.IFormatProvider)">
      <summary>
            Initializes a new instance of <see cref="T:RangeFacetFormatter{T}" />.
            </summary>
      <param name="format">The new format of the range string. The format is equivalent to the format that is used 
            in the <see cref="M:System.String.Format" /> method; the parameter placeholders must be supplied with curly brackets. 
            There are 2 parameters, 0 for lower bound and 1 for upper bound. 
            Example: <![CDATA["{0:c} to {1:c}({2})"]]>.</param>
      <param name="openLowerBoundFormat">The new format of the open lower bound string, if different from the format. 
            This can be used to provide a customized format string, such as "Less than $10.00" when the lower bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
      <param name="openUpperBoundFormat">The new format of the open upper bound string, if different from the format.
            This can be used to provide a customized format string, such as "$500.00 and Up" when the upper bound of the range is "*".
            Set this value to null to default to the value of the format parameter.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="T:BoboBrowse.Net.Service.IBrowseQueryParser">
      <summary>Builds a DocSet from an array of SelectioNodes </summary>
    </member>
    <member name="M:BoboBrowse.Net.Sort.DocIDPriorityQueue.Add(Lucene.Net.Search.ScoreDoc)">
      <summary>
            Adds an Object to a PriorityQueue in log(size) time. If one tries to add
            more objects than maxSize from initialize an
            {@link ArrayIndexOutOfBoundsException} is thrown.
            </summary>
      <param name="element">
      </param>
      <returns>the new 'bottom' element in the queue.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Sort.DocIDPriorityQueue.Replace(Lucene.Net.Search.ScoreDoc,Lucene.Net.Search.ScoreDoc)">
      <summary>
            Takes O(size) time.
            </summary>
      <param name="newEle">
      </param>
      <param name="oldEle">
      </param>
      <returns>the 'bottom' element in the queue.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Sort.DocIDPriorityQueue.Top">
      <summary>
            Gets the least element of the PriorityQueue in constant time. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Sort.DocIDPriorityQueue.Pop">
      <summary>
            Removes and returns the least element of the PriorityQueue 
            in log(size) time.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Sort.DocIDPriorityQueue.UpdateTop">
      <summary>
            Should be called when the Object at top changes values. Still log(n) worst
            case, but it's at least twice as fast to
            
            <pre>
            pq.Top().Change();
            pq.UpdateTop();
            </pre>
            
            instead of
            
            <pre>
            o = pq.Pop();
            o.Change();
            pq.Push(o);
            </pre></summary>
      <returns>the new 'top' element.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Sort.DocIDPriorityQueue.Size">
      <summary>
            Gets the number of elements currently stored in the PriorityQueue.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Sort.DocIDPriorityQueue.Clear">
      <summary>
            Removes all entries from the PriorityQueue.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.IEnumerableExtensions.ToDisplayString``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts an IEnumerable to a display string by calling the ToString() method of the inner type.
            Note that this won't work if the inner type is IEnumerable or IDictionary.
            </summary>
      <typeparam name="T">The enumerable object type that overrides ToString().</typeparam>
      <param name="enumerable">An IEnumerable instance.</param>
      <returns>A string suitable for display or debugging.</returns>
    </member>
    <member name="T:BoboBrowse.Net.Support.TimeUnit">
      <summary>
            A TimeUnit represents time durations at a given unit of
            granularity and provides utility methods to convert across units,
            and to perform timing and delay operations in these units.  A
            TimeUnit does not maintain time information, but only
            helps organize and use time representations that may be maintained
            separately across various contexts.  A nanosecond is defined as one
            thousandth of a microsecond, a microsecond as one thousandth of a
            millisecond, a millisecond as one thousandth of a second, a minute
            as sixty seconds, an hour as sixty minutes, and a day as twenty four
            hours.
            
            A TimeUnit is mainly used to inform time-based methods
            how a given timing parameter should be interpreted. For example,
            the following code will timeout in 50 milliseconds if the
            lock is not available:
            
            <pre>  Lock lock = ...; 
            if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ...
            </pre>
            while this code will timeout in 50 seconds:
            <pre>
            Lock lock = ...;
            if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ...
            </pre>
            
            Note however, that there is no guarantee that a particular timeout
            implementation will be able to notice the passage of time at the
            same granularity as the given TimeUnit.
            </summary>
      <remarks>
            Source: http://fuseyism.com/classpath/doc/java/util/concurrent/TimeUnit-source.html
            </remarks>
    </member>
    <member name="T:BoboBrowse.Net.Support.TimeUnitExtensions">
      <summary>
            Extension methods to make the TimeUnit enumeration act like it does in Java.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Util.BigSegmentedArray">
      <summary>
            Breaks up a regular .NET array by splitting it into a 2 dimensional array with
            a predefined block size. Attempts to induce more efficient GC.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Util.BigIntArray">
      <summary> 
            This class is written for a special purpose. No check is done in insertion and getting a value
            for performance reasons. Be careful if you are going to use this class.
            author femekci
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Util.BigIntBuffer">
      <summary>@author ymatsuda</summary>
    </member>
    <member name="T:BoboBrowse.Net.Support.BitSet">
      <summary>
            This class can be thought of in two ways.  You can see it as a
            vector of bits or as a set of non-negative integers.  The name
            <code>BitSet</code> is a bit misleading.
            
            It is implemented by a bit vector, but its equally possible to see
            it as set of non-negative integer; each integer in the set is
            represented by a set bit at the corresponding index.  The size of
            this structure is determined by the highest integer in the set.
            
            You can union, intersect and build (symmetric) remainders, by
            invoking the logical operations and, or, andNot, resp. xor.
            
            This implementation is NOT synchronized against concurrent access from
            multiple threads. Specifically, if one thread is reading from a bitset
            while another thread is simultaneously modifying it, the results are
            undefined.
            
            author Jochen Hoenicke
            author Tom Tromey (tromey@cygnus.com)
            author Eric Blake (ebb9@email.byu.edu)
            status updated to 1.4
            </summary>
    </member>
    <member name="F:BoboBrowse.Net.Support.BitSet.LONG_MASK">
      <summary>
            A common mask.
            </summary>
    </member>
    <member name="F:BoboBrowse.Net.Support.BitSet.bits">
      <summary>
            The actual bits.
            @serial the i'th bit is in bits[i/64] at position i%64 (where position
            0 is the least significant).
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.#ctor">
      <summary>
            Create a new empty bit set. All bits are initially false.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.#ctor(System.Int32)">
      <summary>
            Create a new empty bit set, with a given size.  This
            constructor reserves enough space to represent the integers
            from <code>0</code> to <code>nbits-1</code>.
            </summary>
      <param name="nbits">nbits the initial size of the bit set</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.And(BoboBrowse.Net.Support.BitSet)">
      <summary>
            Performs the logical AND operation on this bit set and the
            given <code>set</code>.  This means it builds the intersection
            of the two sets.  The result is stored into this bit set.
            </summary>
      <param name="bs">the second bit set</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.AndNot(BoboBrowse.Net.Support.BitSet)">
      <summary>
            Performs the logical AND operation on this bit set and the
            complement of the given <code>bs</code>.  This means it
            selects every element in the first set, that isn't in the
            second set.  The result is stored into this bit set and is
            effectively the set difference of the two.
            </summary>
      <param name="bs">the second bit set</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Cardinality">
      <summary>
            Returns the number of bits set to true.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Clear">
      <summary>
            Sets all bits in the set to false.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Clear(System.Int32)">
      <summary>
            Removes the integer <code>pos</code> from this set. That is
            the corresponding bit is cleared.  If the index is not in the set,
            this method does nothing.
            </summary>
      <param name="pos">a non-negative integer</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Clear(System.Int32,System.Int32)">
      <summary>
            Sets the bits between from (inclusive) and to (exclusive) to false.
            </summary>
      <param name="from">the start range (inclusive)</param>
      <param name="to">the end range (exclusive)</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Clone">
      <summary>
            Create a clone of this bit set, that is an instance of the same
            class and contains the same elements.  But it doesn't change when
            this bit set changes.
            </summary>
      <returns>the clone of this object.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Equals(System.Object)">
      <summary>
            Returns true if the <code>obj</code> is a bit set that contains
            exactly the same elements as this bit set, otherwise false.
            </summary>
      <param name="obj">the object to compare to</param>
      <returns>true if obj equals this bit set</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Flip(System.Int32)">
      <summary>
            Sets the bit at the index to the opposite value.
            </summary>
      <param name="index">the index of the bit</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Flip(System.Int32,System.Int32)">
      <summary>
            Sets a range of bits to the opposite value.
            </summary>
      <param name="from">the low index (inclusive)</param>
      <param name="to">the high index (exclusive)</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Get(System.Int32)">
      <summary>
            Returns true if the integer <code>bitIndex</code> is in this bit
            set, otherwise false.
            </summary>
      <param name="pos">a non-negative integer</param>
      <returns>the value of the bit at the specified position</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Get(System.Int32,System.Int32)">
      <summary>
            Returns a new <code>BitSet</code> composed of a range of bits from
            this one.
            </summary>
      <param name="from">the low index (inclusive)</param>
      <param name="to">the high index (exclusive)</param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.GetHashCode">
      <summary>
            Returns a hash code value for this bit set.  The hash code of
            two bit sets containing the same integers is identical.  The algorithm
            used to compute it is as follows:
            
            Suppose the bits in the BitSet were to be stored in an array of
            long integers called <code>bits</code>, in such a manner that
            bit <code>k</code> is set in the BitSet (for non-negative values
            of <code>k</code>) if and only if
            
            <code>((k/64) &lt; bits.length)
            &amp; ((bits[k/64] &amp; (1L &lt;&lt; (bit % 64))) != 0)
            </code>
            
            Then the following definition of the GetHashCode method
            would be a correct implementation of the actual algorithm:
            
            <code>public override int GetHashCode()
            {
              long h = 1234;
              for (int i = bits.length-1; i &gt;= 0; i--)
              {
                h ^= bits[i] * (i + 1);
              }
              
              return (int)((h &gt;&gt; 32) ^ h);
            }</code>
            
            Note that the hash code values changes, if the set is changed.
            </summary>
      <returns>the hash code value for this bit set.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Intersects(BoboBrowse.Net.Support.BitSet)">
      <summary>
            Returns true if the specified BitSet and this one share at least one
            common true bit.
            </summary>
      <param name="set">the set to check for intersection</param>
      <returns>true if the sets intersect</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.IsEmpty">
      <summary>
            Returns true if this set contains no true bits.
            </summary>
      <returns>true if all bits are false</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.NextClearBit(System.Int32)">
      <summary>
            Returns the index of the next false bit, from the specified bit
            (inclusive).
            </summary>
      <param name="from">the start location</param>
      <returns>the first false bit</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.NextSetBit(System.Int32)">
      <summary>
            Returns the index of the next true bit, from the specified bit
            (inclusive). If there is none, -1 is returned. You can iterate over
            all true bits with this loop:<br /><pre>for (int i = bs.nextSetBit(0); i &gt;= 0; i = bs.nextSetBit(i + 1))
            {
              // operate on i here
            }
            </pre></summary>
      <param name="from">the start location</param>
      <returns>the first true bit, or -1</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Or(BoboBrowse.Net.Support.BitSet)">
      <summary>
            Performs the logical OR operation on this bit set and the
            given <code>set</code>.  This means it builds the union
            of the two sets.  The result is stored into this bit set, which
            grows as necessary.
            </summary>
      <param name="bs">the second bit set</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Set(System.Int32)">
      <summary>
            Add the integer <code>bitIndex</code> to this set.  That is
            the corresponding bit is set to true.  If the index was already in
            the set, this method does nothing.  The size of this structure
            is automatically increased as necessary.
            </summary>
      <param name="pos">a non-negative integer.</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Set(System.Int32,System.Boolean)">
      <summary>
            Sets the bit at the given index to the specified value. The size of
            this structure is automatically increased as necessary.
            </summary>
      <param name="index">the position to set</param>
      <param name="value">the value to set it to</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Set(System.Int32,System.Int32)">
      <summary>
            Sets the bits between from (inclusive) and to (exclusive) to true.
            </summary>
      <param name="from">the start range (inclusive)</param>
      <param name="to">the end range (exclusive)</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Set(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Sets the bits between from (inclusive) and to (exclusive) to the
            specified value.
            </summary>
      <param name="from">the start range (inclusive)</param>
      <param name="to">the end range (exclusive)</param>
      <param name="value">the value to set it to</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.ToString">
      <summary>
            Returns the string representation of this bit set.  This
            consists of a comma separated list of the integers in this set
            surrounded by curly braces.  There is a space after each comma.
            A sample string is thus "{1, 3, 53}".
            </summary>
      <returns>the string representation.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.XOr(BoboBrowse.Net.Support.BitSet)">
      <summary>
            Performs the logical XOR operation on this bit set and the
            given <code>set</code>.  This means it builds the symmetric
            remainder of the two sets (the elements that are in one set,
            but not in the other).  The result is stored into this bit set,
            which grows as necessary.
            </summary>
      <param name="bs">the second bit set</param>
    </member>
    <member name="M:BoboBrowse.Net.Support.BitSet.Ensure(System.Int32)">
      <summary>
            Make sure the vector is big enough.
            </summary>
      <param name="lastElt">the size needed for the bits array</param>
    </member>
    <member name="P:BoboBrowse.Net.Support.BitSet.Length">
      <summary>
            Gets the logical number of bits actually used by this bit
            set.  It returns the index of the highest set bit plus one.
            Note that this method doesn't return the number of set bits.
            
            Returns the index of the highest set bit plus one.
            </summary>
    </member>
    <member name="P:BoboBrowse.Net.Support.BitSet.Size">
      <summary>
            Returns the number of bits actually used by this bit set.  Note
            that this method doesn't return the number of set bits, and that
            future requests for larger bits will make this automatically grow.
            
            Returns the number of bits currently used.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.IDictionaryExtensions.ToDisplayString``1(System.Collections.Generic.IDictionary{System.String,``0})">
      <summary>
            Converts a dictionary of string, Type to a display string by calling ToString() on the inner type.
            Note that this won't work if TValue is an IEnumerable or IDictionary.
            </summary>
      <typeparam name="TValue">The type of object in dictionary that overrides ToString().</typeparam>
      <param name="dictionary">A dictionary with a string key.</param>
      <returns>A string suitable for display or debugging.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.IntBoundedPriorityQueue.#ctor(System.Collections.Generic.IComparer{System.Int32},System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="comparator">a comparator that is used to order the items.</param>
      <param name="capacity">the maximum number of items the queue accepts</param>
      <param name="forbiddenValue">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.IntBoundedPriorityQueue.Element">
      <summary>
            Retrieves, but does not remove, the head of this queue. This
            implementation returns the result of peek unless the queue is empty.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.IntBoundedPriorityQueue.Iterator">
      <summary>
            Returns an iterator over the elements in this collection. There are no guarantees
            concerning the order in which the elements are returned (unless this collection is an
            instance of some class that provides a guarantee).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.IntBoundedPriorityQueue.Offer(System.Int32)">
      <summary>
            When the queue is full, the offered elements are added if they are bigger than the
            smallest one already in the queue.
            
            Inserts the specified element into this queue, if possible. When using queues that
            may impose insertion restrictions (for example capacity bounds), method offer is
            generally preferable to method Collection.add, which can fail to insert an element
            only by throwing an exception.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.IntBoundedPriorityQueue.Peek">
      <summary>
            Retrieves, but does not remove, the head of this queue, returning the <b>forbidden value</b>
            if the queue is empty.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.IntBoundedPriorityQueue.Poll">
      <summary>
            Retrieves and removes the head of this queue, or the <b>forbidden value</b> if this queue is empty.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Util.IntBoundedPriorityQueue.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Util.LazyBigIntArray">
      <summary>
            BigSegmentedArray that creates segments only when the corresponding index is
            being accessed.
            author jko
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.GetBlockSize">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#getBlockSize()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.GetShiftSize">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#getShiftSize()
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.Get(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#get(int)
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.Add(System.Int32,System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#add(int, int)
            </summary>
      <param name="id">
      </param>
      <param name="val">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.Fill(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#fill(int)
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.EnsureCapacity(System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#ensureCapacity(int)
            </summary>
      <param name="size">
      </param>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.FindValue(System.Int32,System.Int32,System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#findValue(int, int, int)
            </summary>
      <param name="val">
      </param>
      <param name="id">
      </param>
      <param name="maxId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.FindValues(Lucene.Net.Util.OpenBitSet,System.Int32,System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#findValues(org.apache.lucene.util.OpenBitSet, int, int)
            </summary>
      <param name="bitset">
      </param>
      <param name="id">
      </param>
      <param name="maxId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.FindValues(Lucene.Net.Util.BitVector,System.Int32,System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#findValues(org.apache.lucene.util.BitVector, int, int)
            </summary>
      <param name="bitset">
      </param>
      <param name="id">
      </param>
      <param name="maxId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.FindValueRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#findValueRange(int, int, int, int)
            </summary>
      <param name="minVal">
      </param>
      <param name="maxVal">
      </param>
      <param name="id">
      </param>
      <param name="maxId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.LazyBigIntArray.FindBits(System.Int32,System.Int32,System.Int32)">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#findBits(int, int, int)
            </summary>
      <param name="bits">
      </param>
      <param name="id">
      </param>
      <param name="maxId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:BoboBrowse.Net.Util.LazyBigIntArray.MaxValue">
      <summary>
            (non-Javadoc)
            see com.browseengine.bobo.util.BigSegmentedArray#maxValue()
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Util.SparseFloatArray.#ctor(System.Single[])">
      <summary>
            Good for saving memory with sparse float arrays, when those arrays no longer need to be mutable.
            
            requires: floats never changes after this method is called returns.
            in fact, you should lose all references to it, since this object 
            might save you a lot of memory.
            </summary>
      <param name="floats">The float array.</param>
    </member>
    <member name="M:BoboBrowse.Net.Util.SparseFloatArray.#ctor(System.Int32)">
      <summary>
            Short-cut to quickly create a sparse float array representing 
            <code>this(new float[capacity]);</code>, but without reading through said array.
            The advantage here is that the constructor is lightning-fast in the case that 
            all values in the float array are known to 
            <c>== 0f</c>.
            </summary>
      <param name="capacity">The capacity of the array.</param>
    </member>
    <member name="M:BoboBrowse.Net.Util.SparseFloatArray.Expand">
      <summary>
            warning: DO NOT modify the return value at all.
            the assumption is that these arrays are QUITE LARGE and that we would not want 
            to unnecessarily copy them.  this method in many cases returns an array from its
            internal representation.  doing anything other than READING these values 
            results in UNDEFINED operations on this, from that point on.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.MutableSparseFloatArray.Expand">
      <summary>
            Future modifications to this may or may not affect values stored in the 
            returned array.  Modifications to the returned array, cause this object instance to become unusable, as
            from this point on all operations are UNDEFINED.
            </summary>
      <returns>the expanded primitive float array rep. of this.</returns>
    </member>
    <member name="M:BoboBrowse.Net.Util.MutableSparseFloatArray.Condense">
      <summary>
            An expensive, but necessary, operation to internally conserve space as things grow.
            Might be useful to call outside of the automatic maintenance, 
            when you expect very few new non-zero values, just changes to existing values,
            in the future.
            
            Uses an expanded form of the float array as scratch space in memory, so be careful 
            that you have enough memory, and try doing this one at a time.
            </summary>
    </member>
    <member name="T:BoboBrowse.Net.Support.ObjectCopier">
      <summary>
            Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
            Provides a method for performing a deep copy of an object.
            Binary Serialization is used to perform the copy.
            </summary>
    </member>
    <member name="M:BoboBrowse.Net.Support.ObjectCopier.Clone``1(``0)">
      <summary>
            Perform a deep Copy of the object.
            </summary>
      <typeparam name="T">The type of object being copied.</typeparam>
      <param name="source">The object instance to copy.</param>
      <returns>The copied object.</returns>
    </member>
    <member name="T:LuceneExt.DocSet">
      <summary>
            Represents a sorted integer set
            </summary>
    </member>
    <member name="M:LuceneExt.DocSet.AddDoc(System.Int32)">
      <summary>
            Add a doc id to the set 
            </summary>
      <param name="docid">The doc id to add.</param>
    </member>
    <member name="M:LuceneExt.DocSet.AddDocs(System.Int32[],System.Int32,System.Int32)">
      <summary>
            Add an array of sorted docIds to the set
            </summary>
      <param name="docids">
      </param>
      <param name="start">
      </param>
      <param name="len">
      </param>
    </member>
    <member name="M:LuceneExt.DocSet.Find(System.Int32)">
      <summary>Return the set size </summary>
      <returns>true if present, false otherwise </returns>
    </member>
    <member name="M:LuceneExt.DocSet.FindWithIndex(System.Int32)">
      <summary>Return the set size </summary>
      <returns>index if present, -1 otherwise </returns>
    </member>
    <member name="M:LuceneExt.DocSet.Size">
      <summary>Gets the number of ids in the set </summary>
      <returns>size of the docset </returns>
    </member>
    <member name="M:LuceneExt.DocSet.SizeInBytes">
      <summary>Return the set size in bytes </summary>
      <returns>index if present, -1 otherwise </returns>
    </member>
    <member name="M:LuceneExt.DocSet.Optimize">
      <summary>Optimize by trimming underlying data structures </summary>
    </member>
    <member name="T:LuceneExt.StatefulDSIterator">
      <summary>This abstract class defines methods to iterate over a set of non-decreasing doc ids. </summary>
    </member>
    <member name="M:LuceneExt.BitSet.MyOpenBitSet.FastSetAs(System.Int64,System.Int32)">
      <summary>
            Set 0/1 at the specified index.
            Note: The value for the bitVal is not checked for 0/1, hence incorrect values passed 
            lead to unexpected results
            </summary>
      <param name="index">
      </param>
      <param name="bitVal">
      </param>
    </member>
    <member name="T:LuceneExt.P4DSetNoBase">
      <summary> 
            Implementation of the p4delta algorithm for sorted integer arrays based on
            
            <list type="number"><item><description>Original Algorithm from http://homepages.cwi.nl/~heman/downloads/msthesis.pdf</description></item><item><description>Optimization and variation from http://www2008.org/papers/pdf/p387-zhangA.pdf</description></item></list>
            
            This class is a wrapper around a CompressedSegment based on Lucene OpenBitSet 
            </summary>
    </member>
    <member name="M:LuceneExt.P4DSetNoBase.Compress(System.Int32[])">
      <summary>Alternate implementation for compress
               *  </summary>
               * <param name="input"></param>
               * <returns> compressed bitset </returns>
               * <exception cref="T:System.ArgumentException"></exception></member>
    <member name="M:LuceneExt.P4DSetNoBase.CompressAlt(System.Int32[])">
      <summary>Alternate implementation for compress
               *  </summary>
               * <param name="input"></param>
               * <returns> comprssed set in long array form </returns>
               * <exception cref="T:System.ArgumentException"></exception></member>
    <member name="M:LuceneExt.P4DSetNoBase.PrintParams">
            **
        </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.BATCH_SIZE">
      <summary>Default batch size for compression blobs</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.BATCH_OVER">
      <summary>Default batch size for compression blobs</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.current_base">
      <summary>Current base size</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.lastAdded">
      <summary>Last added value</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.blob">
      <summary>List of Data blobs</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.current">
      <summary>Pointer to the current data block.</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.current_size">
      <summary>Size of the current array</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.current_ex_count">
      <summary>Current Max bit count</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.current_b">
      <summary>Current Bit Size</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.bVal">
      <summary>B Value accumulator</summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.compressedBits">
      <summary>compressed bit size </summary>
      <summary>Compressed Bits </summary>
    </member>
    <member name="F:LuceneExt.Impl.AbstractDocSet.NUMBITS">
      <summary>Add document to this set
               * 
               
              public void AddDoc(int docid) {
                if (size() == 0) {
                  initSet();
                  current[current_size++] = docid;
                  current_base = docid;
                  lastAdded = current_base;
                }
            
                else if (current_size == BATCH_SIZE) {
            
                  int exceptionCount = 0;
            
                  // formulate b value. Minimum bits used is 5.
                  for (int k = 31; k &gt; 3; k--) {
                    // System.out.print(bVal[k]+":");
                    exceptionCount += bVal[k];
                    if (exceptionCount &gt;= BATCH_OVER) {
                      current_b = k;
                      exceptionCount -= bVal[k];
                      break;
                    }
                  }
            
                  // Compensate for extra bit
                  current_b += 1;
            
                  // set current_exception_count
                  current_ex_count = exceptionCount;
            
                  OpenBitSet myop = (OpenBitSet) compress();
                  compressedBits+=myop.capacity();
                  blob.add(myop);
            
                  // roll the batch
                  current_size = 1;
                  current_base = docid;
                  lastAdded = current_base;
                  current[0] = current_base;
                  current_ex_count = 0;
            
                  bVal = new int[33];
            
                }// end batch boundary
            
                else {
                  try {
            
                    current[current_size] = docid - lastAdded;
                    lastAdded = docid;
                    if (current[current_size] != 0)
                      bVal[(int) (Math.log(current[current_size]) / logBase2) + 1]++;
            
                    current_size++;
                  } catch (ArrayIndexOutOfBoundsException w) {
                    Console.Error.WriteLine("Error inserting DOC:" + docid);
            
                  }
            
                } // end append to end of array
             </summary>
              }
        </member>
    <member name="M:LuceneExt.Impl.AbstractDocSet.Compress">
      <summary>Internal compression Method  </summary>
      <returns> compressed object </returns>
    </member>
    <member name="M:LuceneExt.Impl.AbstractDocSet.decompress(Lucene.Net.Util.OpenBitSet)">
      <summary>Internal Decompression Method</summary>
    </member>
    <member name="M:LuceneExt.Impl.AbstractDocSet.decompress(Lucene.Net.Util.DocIdBitSet)">
      <summary>Internal Decompression Method</summary>
      <returns> decompressed in the form of integer array </returns>
    </member>
    <member name="M:LuceneExt.Impl.AbstractDocSet.Size">
      <summary>Number of compressed units plus the last block </summary>
      <returns> docset size </returns>
    </member>
    <member name="M:LuceneExt.Impl.AbstractDocSet.AddDoc(System.Int32)">
      <summary>Add document to this set</summary>
    </member>
    <member name="M:LuceneExt.Impl.AndDocIdSet.FindWithIndex(System.Int32)">
      <summary>Find existence in the set with index
               * 
               * NOTE :  Expensive call. Avoid. </summary>
               * <param name="val"> value to find the index for </param>
               * <returns> index where the value is </returns></member>
    <member name="M:LuceneExt.Impl.NotDocIdSet.FindWithIndex(System.Int32)">
      <summary>Find existence in the set with index
               * 
               * NOTE :  Expensive call. Avoid. </summary>
               * <param name="val"> value to find the index for </param>
               * <returns> index if the given value </returns></member>
    <member name="M:LuceneExt.Impl.OrDocIdSet.FindWithIndex(System.Int32)">
      <summary>Find existence in the set with index
               * NOTE :  Expensive call. Avoid. </summary>
               * <param name="val"> value to find the index for </param>
               * <returns> index where the value is </returns></member>
    <member name="T:LuceneExt.Impl.P4DDocIdSet">
      <summary>Doc id set wrapper around P4DSet  
            @author abhasin
            </summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.ADDRESS_BITS">
      <summary>Address bits</summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.cursor">
      <summary>retaining Offset from the list of blobs from the iterator pov</summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.bi">
      <summary>Current iterating batch index.</summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.offset">
      <summary>Current iterating offset.</summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.lastReturn">
      <summary>doc() returned</summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.size">
      <summary>size of the set</summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.ref">
      <summary>Reference to the blob iterating</summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.blobSize">
      <summary>Reference to the blob iterating</summary>
    </member>
    <member name="M:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.get(System.Int64[],System.Int32)">
      <summary>Method to allow iteration in decompressed form </summary>
    </member>
    <member name="M:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.BatchIndex(System.Int32)">
      <summary> * Get the index of the batch this cursor position falls into
                *  </summary>
                * <param name="index">
                * @return </param></member>
    <member name="M:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.Advance(System.Int32)">
      <summary> * Next need be called after skipping.</summary>
    </member>
    <member name="M:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.FindAndUpdate(System.Int64[],System.Int32,System.Int32)">
      <summary> * Find the element in the compressed set
                *  </summary>
                * <param name="next"></param>
                * <param name="target"></param>
                * <param name="base">
                * @return </param></member>
    <member name="M:LuceneExt.Impl.P4DDocIdSet.P4DDocIdSetIterator.FindAndUpdate(System.Int32[],System.Int32)">
      <summary>
            Find the element in the set and update parameters.
            </summary>
      <param name="array">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.compressedSet">
      <summary>Utitlity Object compression. </summary>
    </member>
    <member name="F:LuceneExt.Impl.P4DDocIdSet.baseList">
      <summary>List for the base integer values of the compressed batches. </summary>
    </member>
    <member name="M:LuceneExt.Impl.P4DDocIdSet.Decompress(Lucene.Net.Util.OpenBitSet)">
      <summary>Method to decompress the entire batch
               *  </summary>
               * <param name="blob"> OpenBitSet </param>
               * <returns> int array with decompressed segment of numbers </returns></member>
    <member name="M:LuceneExt.Impl.P4DDocIdSet.BinarySearchForNearest(System.Int32,System.Int32,System.Int32)">
      <summary>Binary search</summary>
      <param name="val">
      </param>
      <param name="begin">
      </param>
      <param name="end">
      </param>
      <returns> index greater than or equal to the target. -1 if the target is out of range. </returns>
    </member>
    <member name="T:LuceneExt.Util.DisiDocQueue">
      <summary> 
            A DisiDocQueue maintains a partial ordering of its DocIdSetIterators such that the
            least DocIdSetIterator (disi) can always be found in constant time.
            Put()'s and pop()'s require log(size) time.
            The ordering is by DocIdSetIterator.Doc().
            </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.#ctor(System.Int32)">
      <summary> Create a DisiDocQueue with a maximum size.  </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.Put(Lucene.Net.Search.DocIdSetIterator)">
      <summary>Adds a Scorer to a ScorerDocQueue in log(size) time.
               * If one tries to add more Scorers than maxSize
               * a RuntimeException (ArrayIndexOutOfBound) is thrown. </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.Insert(Lucene.Net.Search.DocIdSetIterator)">
      <summary>Adds a DocIdSetIterator to the DisiDocQueue in log(size) time if either
               * the DisiDocQueue is not full, or not lessThan(disi, top()). </summary>
               * <param name="disi"></param>
               * <returns> true if DocIdSetIterator is added, false otherwise. </returns></member>
    <member name="M:LuceneExt.Util.DisiDocQueue.Top">
      <summary> Returns the least DocIdSetIterator of the DisiDocQueue in constant time.
              * Should not be used when the queue is empty. </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.TopDoc">
      <summary> Returns document number of the least Scorer of the ScorerDocQueue
              * in constant time.
              * Should not be used when the queue is empty. </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.Pop">
      <summary> Removes and returns the least disi of the DisiDocQueue in log(size)
              * time.
              * Should not be used when the queue is empty. </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.PopNoResult">
      <summary> Removes the least disi of the DisiDocQueue in log(size) time.
              * Should not be used when the queue is empty. </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.AdjustTop">
      <summary> Should be called when the disi at top changes doc() value.
              * Still log(n) worst case, but it's at least twice as fast to <pre>
              *  { pq.top().change(); pq.adjustTop(); }
              * </pre> instead of <pre>
              *  { o = pq.pop(); o.change(); pq.push(o); }
              * </pre></summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.Size">
      <summary> Returns the number of disis currently stored in the DisiDocQueue.  </summary>
    </member>
    <member name="M:LuceneExt.Util.DisiDocQueue.Clear">
      <summary> Removes all entries from the DisiDocQueue.  </summary>
    </member>
    <member name="T:LuceneExt.Util.DocSetFactory">
      <summary>
            Utility class to make appropriate measurement calls to recognize optimal
            representation for an ordered document set based on hints provided and 
            min/max/count values on the docset if available. 
            
            author abhasin
            </summary>
    </member>
    <member name="M:LuceneExt.Util.PrimitiveArray`1.Seal">
      <summary>called to shrink the array size to the current # of elements to save memory.</summary>
    </member>
  </members>
</doc>